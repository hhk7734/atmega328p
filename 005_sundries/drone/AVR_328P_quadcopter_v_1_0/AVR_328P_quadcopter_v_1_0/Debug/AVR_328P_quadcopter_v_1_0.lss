
AVR_328P_quadcopter_v_1_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dd  00800100  00800100  00001ca4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b64  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb0  00000000  00000000  00004ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014fd  00000000  00000000  00005a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00006f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  00007704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e1c  00000000  00000000  00008062  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  00009e7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      28:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_10>
      2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      48:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_18>
      4c:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_19>
      50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ad 3d       	cpi	r26, 0xDD	; 221
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
      88:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <_exit>

0000008c <__bad_interrupt>:
      8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <eeprom_read>:
    VAL.A = _data;
    //  eeprom_write(_addr,VAL.a[0]);
    //  eeprom_write(_addr + 1,VAL.a[1]);
    eeprom_update(_addr,VAL.a[0]);
    eeprom_update(_addr + 1,VAL.a[1]);
}
      90:	f9 99       	sbic	0x1f, 1	; 31
      92:	fe cf       	rjmp	.-4      	; 0x90 <eeprom_read>
      94:	92 bd       	out	0x22, r25	; 34
      96:	81 bd       	out	0x21, r24	; 33
      98:	f8 9a       	sbi	0x1f, 0	; 31
      9a:	80 b5       	in	r24, 0x20	; 32
      9c:	08 95       	ret

0000009e <eeprom_read_i16>:

int16_t eeprom_read_i16(uint16_t _addr)
{
      9e:	1f 93       	push	r17
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	ec 01       	movw	r28, r24
    union{
        int16_t A;
        uint8_t a[2];
    }VAL;
    VAL.a[0] = eeprom_read(_addr);
      a6:	0e 94 48 00 	call	0x90	; 0x90 <eeprom_read>
      aa:	18 2f       	mov	r17, r24
    VAL.a[1] = eeprom_read(_addr + 1);
      ac:	ce 01       	movw	r24, r28
      ae:	01 96       	adiw	r24, 0x01	; 1
      b0:	0e 94 48 00 	call	0x90	; 0x90 <eeprom_read>
      b4:	98 2f       	mov	r25, r24
    return VAL.A;
      b6:	81 2f       	mov	r24, r17
      b8:	df 91       	pop	r29
      ba:	cf 91       	pop	r28
      bc:	1f 91       	pop	r17
      be:	08 95       	ret

000000c0 <i2c_trans_and_check>:
}

uint8_t getErrorsCount(void)
{
    return i2c_errors_count;
}
      c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      c4:	8f ef       	ldi	r24, 0xFF	; 255
      c6:	ec eb       	ldi	r30, 0xBC	; 188
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	0a c0       	rjmp	.+20     	; 0xe0 <i2c_trans_and_check+0x20>
      cc:	81 50       	subi	r24, 0x01	; 1
      ce:	41 f4       	brne	.+16     	; 0xe0 <i2c_trans_and_check+0x20>
      d0:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
      de:	08 95       	ret
      e0:	90 81       	ld	r25, Z
      e2:	99 23       	and	r25, r25
      e4:	9c f7       	brge	.-26     	; 0xcc <i2c_trans_and_check+0xc>
      e6:	08 95       	ret

000000e8 <i2c_begin>:
      e8:	9b 01       	movw	r18, r22
      ea:	ac 01       	movw	r20, r24
      ec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	74 e2       	ldi	r23, 0x24	; 36
      f4:	84 ef       	ldi	r24, 0xF4	; 244
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__udivmodsi4>
      fc:	da 01       	movw	r26, r20
      fe:	c9 01       	movw	r24, r18
     100:	40 97       	sbiw	r24, 0x10	; 16
     102:	a1 09       	sbc	r26, r1
     104:	b1 09       	sbc	r27, r1
     106:	b6 95       	lsr	r27
     108:	a7 95       	ror	r26
     10a:	97 95       	ror	r25
     10c:	87 95       	ror	r24
     10e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     112:	84 e0       	ldi	r24, 0x04	; 4
     114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     11c:	08 95       	ret

0000011e <i2c_trans_data>:
     11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     122:	84 e8       	ldi	r24, 0x84	; 132
     124:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_trans_and_check>
     128:	08 95       	ret

0000012a <i2c_start_SLA_W>:
     12a:	cf 93       	push	r28
     12c:	c8 2f       	mov	r28, r24
     12e:	84 ea       	ldi	r24, 0xA4	; 164
     130:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_trans_and_check>
     134:	8c 2f       	mov	r24, r28
     136:	88 0f       	add	r24, r24
     138:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <i2c_start_SLA_R>:
     140:	cf 93       	push	r28
     142:	c8 2f       	mov	r28, r24
     144:	84 ea       	ldi	r24, 0xA4	; 164
     146:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_trans_and_check>
     14a:	8c 2f       	mov	r24, r28
     14c:	88 0f       	add	r24, r24
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <i2c_receive_data>:
     158:	84 ec       	ldi	r24, 0xC4	; 196
     15a:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_trans_and_check>
     15e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     162:	08 95       	ret

00000164 <i2c_last_receive_data>:
     164:	84 e8       	ldi	r24, 0x84	; 132
     166:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_trans_and_check>
     16a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     16e:	94 e9       	ldi	r25, 0x94	; 148
     170:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     174:	08 95       	ret

00000176 <i2c_write_REG>:

void i2c_write_REG(uint8_t addr, uint8_t regaddr , uint8_t data)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	d6 2f       	mov	r29, r22
     17c:	c4 2f       	mov	r28, r20
    i2c_start_SLA_W(addr);
     17e:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_start_SLA_W>
    i2c_trans_data(regaddr);
     182:	8d 2f       	mov	r24, r29
     184:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
    i2c_trans_data(data);
     188:	8c 2f       	mov	r24, r28
     18a:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
    return twdr;
}

void i2c_stop(void)
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     18e:	84 e9       	ldi	r24, 0x94	; 148
     190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
{
    i2c_start_SLA_W(addr);
    i2c_trans_data(regaddr);
    i2c_trans_data(data);
    i2c_stop();
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <setup>:
		while (tc_micros() - startTime < LOOP_TIME);
    }
}

void setup(void)
{
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <setup+0xa>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <setup+0xc>
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <setup+0xe>
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 1<<DDB5;
     1ac:	25 9a       	sbi	0x04, 5	; 4
	
	uart0_begin(250000);
     1ae:	60 e9       	ldi	r22, 0x90	; 144
     1b0:	70 ed       	ldi	r23, 0xD0	; 208
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <uart0_begin>
	
	i2c_begin(400000);
     1ba:	60 e8       	ldi	r22, 0x80	; 128
     1bc:	7a e1       	ldi	r23, 0x1A	; 26
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_begin>
	
	mpu9150_setup();
     1c6:	0e 94 98 01 	call	0x330	; 0x330 <mpu9150_setup>
     1ca:	12 e3       	ldi	r17, 0x32	; 50
	
	for (uint8_t i = 0; i<50 ; i++)
	{
		int16_t a[3];
		mpu9150_get_all(a,a,a);
     1cc:	ae 01       	movw	r20, r28
     1ce:	4f 5f       	subi	r20, 0xFF	; 255
     1d0:	5f 4f       	sbci	r21, 0xFF	; 255
     1d2:	ba 01       	movw	r22, r20
     1d4:	ca 01       	movw	r24, r20
     1d6:	0e 94 b8 03 	call	0x770	; 0x770 <mpu9150_get_all>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	8f e3       	ldi	r24, 0x3F	; 63
     1dc:	9f e1       	ldi	r25, 0x1F	; 31
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <setup+0x44>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <setup+0x4a>
     1e4:	00 00       	nop
     1e6:	11 50       	subi	r17, 0x01	; 1
	
	i2c_begin(400000);
	
	mpu9150_setup();
	
	for (uint8_t i = 0; i<50 ; i++)
     1e8:	89 f7       	brne	.-30     	; 0x1cc <setup+0x32>
	//eeprom_write_i16(EEPROM_MAG_OFFSET_Z,mag_xyz_offset[2]);
	//eeprom_write_i16(EEPROM_MAG_SENSITIVITY_X,mag_xyz_sensitivity[0]);
	//eeprom_write_i16(EEPROM_MAG_SENSITIVITY_Y,mag_xyz_sensitivity[1]);
	//eeprom_write_i16(EEPROM_MAG_SENSITIVITY_Z,mag_xyz_sensitivity[2]);
		
	acc_xyz_offset[0] = eeprom_read_i16(EEPROM_ACC_OFFSET_X);
     1ea:	80 e1       	ldi	r24, 0x10	; 16
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     1f2:	0f e9       	ldi	r16, 0x9F	; 159
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	f8 01       	movw	r30, r16
     1f8:	91 83       	std	Z+1, r25	; 0x01
     1fa:	80 83       	st	Z, r24
	acc_xyz_offset[1] = eeprom_read_i16(EEPROM_ACC_OFFSET_Y);
     1fc:	82 e1       	ldi	r24, 0x12	; 18
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     204:	f8 01       	movw	r30, r16
     206:	93 83       	std	Z+3, r25	; 0x03
     208:	82 83       	std	Z+2, r24	; 0x02
	acc_xyz_offset[2] = eeprom_read_i16(EEPROM_ACC_OFFSET_Z);
     20a:	84 e1       	ldi	r24, 0x14	; 20
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     212:	f8 01       	movw	r30, r16
     214:	95 83       	std	Z+5, r25	; 0x05
     216:	84 83       	std	Z+4, r24	; 0x04
	gyro_xyz_offset[0] = eeprom_read_i16(EEPROM_GYRO_OFFSET_X);
     218:	86 e1       	ldi	r24, 0x16	; 22
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     220:	09 e9       	ldi	r16, 0x99	; 153
     222:	11 e0       	ldi	r17, 0x01	; 1
     224:	f8 01       	movw	r30, r16
     226:	91 83       	std	Z+1, r25	; 0x01
     228:	80 83       	st	Z, r24
	gyro_xyz_offset[1] = eeprom_read_i16(EEPROM_GYRO_OFFSET_Y);
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     232:	f8 01       	movw	r30, r16
     234:	93 83       	std	Z+3, r25	; 0x03
     236:	82 83       	std	Z+2, r24	; 0x02
	gyro_xyz_offset[2] = eeprom_read_i16(EEPROM_GYRO_OFFSET_Z);
     238:	8a e1       	ldi	r24, 0x1A	; 26
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     240:	f8 01       	movw	r30, r16
     242:	95 83       	std	Z+5, r25	; 0x05
     244:	84 83       	std	Z+4, r24	; 0x04
	mag_xyz_offset[0] = eeprom_read_i16(EEPROM_MAG_OFFSET_X);
     246:	8c e1       	ldi	r24, 0x1C	; 28
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     24e:	03 e9       	ldi	r16, 0x93	; 147
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	f8 01       	movw	r30, r16
     254:	91 83       	std	Z+1, r25	; 0x01
     256:	80 83       	st	Z, r24
	mag_xyz_offset[1] = eeprom_read_i16(EEPROM_MAG_OFFSET_Y);
     258:	8e e1       	ldi	r24, 0x1E	; 30
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     260:	f8 01       	movw	r30, r16
     262:	93 83       	std	Z+3, r25	; 0x03
     264:	82 83       	std	Z+2, r24	; 0x02
	mag_xyz_offset[2] = eeprom_read_i16(EEPROM_MAG_OFFSET_Z);
     266:	80 e2       	ldi	r24, 0x20	; 32
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     26e:	f8 01       	movw	r30, r16
     270:	95 83       	std	Z+5, r25	; 0x05
     272:	84 83       	std	Z+4, r24	; 0x04
	mag_xyz_sensitivity[0] = eeprom_read_i16(EEPROM_MAG_SENSITIVITY_X);
     274:	82 e2       	ldi	r24, 0x22	; 34
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     27c:	0d e8       	ldi	r16, 0x8D	; 141
     27e:	11 e0       	ldi	r17, 0x01	; 1
     280:	f8 01       	movw	r30, r16
     282:	91 83       	std	Z+1, r25	; 0x01
     284:	80 83       	st	Z, r24
	mag_xyz_sensitivity[1] = eeprom_read_i16(EEPROM_MAG_SENSITIVITY_Y);
     286:	84 e2       	ldi	r24, 0x24	; 36
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     28e:	f8 01       	movw	r30, r16
     290:	93 83       	std	Z+3, r25	; 0x03
     292:	82 83       	std	Z+2, r24	; 0x02
	mag_xyz_sensitivity[2] = eeprom_read_i16(EEPROM_MAG_SENSITIVITY_Z);
     294:	86 e2       	ldi	r24, 0x26	; 38
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 4f 00 	call	0x9e	; 0x9e <eeprom_read_i16>
     29c:	f8 01       	movw	r30, r16
     29e:	95 83       	std	Z+5, r25	; 0x05
     2a0:	84 83       	std	Z+4, r24	; 0x04
	
	tc_setup();
     2a2:	0e 94 3f 0a 	call	0x147e	; 0x147e <tc_setup>
	
	rpy_setup();	
     2a6:	0e 94 58 05 	call	0xab0	; 0xab0 <rpy_setup>
}
     2aa:	26 96       	adiw	r28, 0x06	; 6
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	08 95       	ret

000002c0 <loop>:

void loop(void)
{
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <loop+0x6>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <loop+0x8>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <loop+0xa>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
	int16_t rpy[3];
	rpy_get_rpy(rpy);
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	0e 94 84 05 	call	0xb08	; 0xb08 <rpy_get_rpy>
     2d6:	26 96       	adiw	r28, 0x06	; 6
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <main>:
void setup(void);
void loop(void);

int main(void)
{
	setup();
     2e8:	0e 94 cd 00 	call	0x19a	; 0x19a <setup>
    while (1) 
    {
		startTime = tc_micros();
     2ec:	0e 94 65 0a 	call	0x14ca	; 0x14ca <tc_micros>
     2f0:	60 93 89 01 	sts	0x0189, r22	; 0x800189 <startTime>
     2f4:	70 93 8a 01 	sts	0x018A, r23	; 0x80018a <startTime+0x1>
     2f8:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <startTime+0x2>
     2fc:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <startTime+0x3>
		loop();
     300:	0e 94 60 01 	call	0x2c0	; 0x2c0 <loop>
		//uart0_write_i16(tc_micros() - startTime);
		//uart0_write('\n');
		while (tc_micros() - startTime < LOOP_TIME);
     304:	0e 94 65 0a 	call	0x14ca	; 0x14ca <tc_micros>
     308:	00 91 89 01 	lds	r16, 0x0189	; 0x800189 <startTime>
     30c:	10 91 8a 01 	lds	r17, 0x018A	; 0x80018a <startTime+0x1>
     310:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <startTime+0x2>
     314:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <startTime+0x3>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	80 1b       	sub	r24, r16
     31e:	91 0b       	sbc	r25, r17
     320:	a2 0b       	sbc	r26, r18
     322:	b3 0b       	sbc	r27, r19
     324:	88 3b       	cpi	r24, 0xB8	; 184
     326:	9b 40       	sbci	r25, 0x0B	; 11
     328:	a1 05       	cpc	r26, r1
     32a:	b1 05       	cpc	r27, r1
     32c:	58 f3       	brcs	.-42     	; 0x304 <main+0x1c>
     32e:	de cf       	rjmp	.-68     	; 0x2ec <main+0x4>

00000330 <mpu9150_setup>:
    acc_xyz[1] -= acc_xyz_offset[1];
    acc_xyz[2] -= acc_xyz_offset[2];
    gyro_xyz[0] -= gyro_xyz_offset[0];
    gyro_xyz[1] -= gyro_xyz_offset[1];
    gyro_xyz[2] -= gyro_xyz_offset[2];
}
     330:	40 e8       	ldi	r20, 0x80	; 128
     332:	6b e6       	ldi	r22, 0x6B	; 107
     334:	88 e6       	ldi	r24, 0x68	; 104
     336:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     33a:	2f ef       	ldi	r18, 0xFF	; 255
     33c:	81 ee       	ldi	r24, 0xE1	; 225
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	21 50       	subi	r18, 0x01	; 1
     342:	80 40       	sbci	r24, 0x00	; 0
     344:	90 40       	sbci	r25, 0x00	; 0
     346:	e1 f7       	brne	.-8      	; 0x340 <mpu9150_setup+0x10>
     348:	00 c0       	rjmp	.+0      	; 0x34a <mpu9150_setup+0x1a>
     34a:	00 00       	nop
     34c:	43 e0       	ldi	r20, 0x03	; 3
     34e:	6b e6       	ldi	r22, 0x6B	; 107
     350:	88 e6       	ldi	r24, 0x68	; 104
     352:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     356:	43 e0       	ldi	r20, 0x03	; 3
     358:	69 e1       	ldi	r22, 0x19	; 25
     35a:	88 e6       	ldi	r24, 0x68	; 104
     35c:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	6a e1       	ldi	r22, 0x1A	; 26
     364:	88 e6       	ldi	r24, 0x68	; 104
     366:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     36a:	48 e1       	ldi	r20, 0x18	; 24
     36c:	6b e1       	ldi	r22, 0x1B	; 27
     36e:	88 e6       	ldi	r24, 0x68	; 104
     370:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     374:	40 e1       	ldi	r20, 0x10	; 16
     376:	6c e1       	ldi	r22, 0x1C	; 28
     378:	88 e6       	ldi	r24, 0x68	; 104
     37a:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     37e:	4d e0       	ldi	r20, 0x0D	; 13
     380:	64 e2       	ldi	r22, 0x24	; 36
     382:	88 e6       	ldi	r24, 0x68	; 104
     384:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     388:	4c e8       	ldi	r20, 0x8C	; 140
     38a:	65 e2       	ldi	r22, 0x25	; 37
     38c:	88 e6       	ldi	r24, 0x68	; 104
     38e:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     392:	45 e0       	ldi	r20, 0x05	; 5
     394:	66 e2       	ldi	r22, 0x26	; 38
     396:	88 e6       	ldi	r24, 0x68	; 104
     398:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     39c:	42 ed       	ldi	r20, 0xD2	; 210
     39e:	67 e2       	ldi	r22, 0x27	; 39
     3a0:	88 e6       	ldi	r24, 0x68	; 104
     3a2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3a6:	4c e8       	ldi	r20, 0x8C	; 140
     3a8:	68 e2       	ldi	r22, 0x28	; 40
     3aa:	88 e6       	ldi	r24, 0x68	; 104
     3ac:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3b0:	43 e0       	ldi	r20, 0x03	; 3
     3b2:	69 e2       	ldi	r22, 0x29	; 41
     3b4:	88 e6       	ldi	r24, 0x68	; 104
     3b6:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3ba:	42 ed       	ldi	r20, 0xD2	; 210
     3bc:	6a e2       	ldi	r22, 0x2A	; 42
     3be:	88 e6       	ldi	r24, 0x68	; 104
     3c0:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3c4:	4c e8       	ldi	r20, 0x8C	; 140
     3c6:	6b e2       	ldi	r22, 0x2B	; 43
     3c8:	88 e6       	ldi	r24, 0x68	; 104
     3ca:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3ce:	47 e0       	ldi	r20, 0x07	; 7
     3d0:	6c e2       	ldi	r22, 0x2C	; 44
     3d2:	88 e6       	ldi	r24, 0x68	; 104
     3d4:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3d8:	42 ed       	ldi	r20, 0xD2	; 210
     3da:	6d e2       	ldi	r22, 0x2D	; 45
     3dc:	88 e6       	ldi	r24, 0x68	; 104
     3de:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3e2:	4c e0       	ldi	r20, 0x0C	; 12
     3e4:	6e e2       	ldi	r22, 0x2E	; 46
     3e6:	88 e6       	ldi	r24, 0x68	; 104
     3e8:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3ec:	4a e0       	ldi	r20, 0x0A	; 10
     3ee:	6f e2       	ldi	r22, 0x2F	; 47
     3f0:	88 e6       	ldi	r24, 0x68	; 104
     3f2:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     3f6:	41 e8       	ldi	r20, 0x81	; 129
     3f8:	60 e3       	ldi	r22, 0x30	; 48
     3fa:	88 e6       	ldi	r24, 0x68	; 104
     3fc:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     400:	43 e1       	ldi	r20, 0x13	; 19
     402:	64 e3       	ldi	r22, 0x34	; 52
     404:	88 e6       	ldi	r24, 0x68	; 104
     406:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	66 e6       	ldi	r22, 0x66	; 102
     40e:	88 e6       	ldi	r24, 0x68	; 104
     410:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     414:	4f e0       	ldi	r20, 0x0F	; 15
     416:	67 e6       	ldi	r22, 0x67	; 103
     418:	88 e6       	ldi	r24, 0x68	; 104
     41a:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     41e:	40 e2       	ldi	r20, 0x20	; 32
     420:	6a e6       	ldi	r22, 0x6A	; 106
     422:	88 e6       	ldi	r24, 0x68	; 104
     424:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_REG>
     428:	08 95       	ret

0000042a <mpu9150_get_raw_gyro>:
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	8c 01       	movw	r16, r24
     432:	88 e6       	ldi	r24, 0x68	; 104
     434:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_start_SLA_W>
     438:	83 e4       	ldi	r24, 0x43	; 67
     43a:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
     43e:	88 e6       	ldi	r24, 0x68	; 104
     440:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start_SLA_R>
     444:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     448:	c8 2f       	mov	r28, r24
     44a:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     44e:	2c 2f       	mov	r18, r28
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	32 2f       	mov	r19, r18
     454:	22 27       	eor	r18, r18
     456:	28 2b       	or	r18, r24
     458:	f8 01       	movw	r30, r16
     45a:	31 83       	std	Z+1, r19	; 0x01
     45c:	20 83       	st	Z, r18
     45e:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     462:	c8 2f       	mov	r28, r24
     464:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     468:	2c 2f       	mov	r18, r28
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	32 2f       	mov	r19, r18
     46e:	22 27       	eor	r18, r18
     470:	28 2b       	or	r18, r24
     472:	f8 01       	movw	r30, r16
     474:	33 83       	std	Z+3, r19	; 0x03
     476:	22 83       	std	Z+2, r18	; 0x02
     478:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     47c:	c8 2f       	mov	r28, r24
     47e:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_last_receive_data>
     482:	2c 2f       	mov	r18, r28
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	32 2f       	mov	r19, r18
     488:	22 27       	eor	r18, r18
     48a:	28 2b       	or	r18, r24
     48c:	f8 01       	movw	r30, r16
     48e:	35 83       	std	Z+5, r19	; 0x05
     490:	24 83       	std	Z+4, r18	; 0x04
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <mpu9150_get_raw_mag>:
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	8c 01       	movw	r16, r24
     4a2:	88 e6       	ldi	r24, 0x68	; 104
     4a4:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_start_SLA_W>
     4a8:	89 e4       	ldi	r24, 0x49	; 73
     4aa:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
     4ae:	88 e6       	ldi	r24, 0x68	; 104
     4b0:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start_SLA_R>
     4b4:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     4b8:	c8 2f       	mov	r28, r24
     4ba:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     4be:	2c 2f       	mov	r18, r28
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	32 2f       	mov	r19, r18
     4c4:	22 27       	eor	r18, r18
     4c6:	28 2b       	or	r18, r24
     4c8:	f8 01       	movw	r30, r16
     4ca:	31 83       	std	Z+1, r19	; 0x01
     4cc:	20 83       	st	Z, r18
     4ce:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     4d2:	c8 2f       	mov	r28, r24
     4d4:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     4d8:	2c 2f       	mov	r18, r28
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	32 2f       	mov	r19, r18
     4de:	22 27       	eor	r18, r18
     4e0:	28 2b       	or	r18, r24
     4e2:	f8 01       	movw	r30, r16
     4e4:	33 83       	std	Z+3, r19	; 0x03
     4e6:	22 83       	std	Z+2, r18	; 0x02
     4e8:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     4ec:	c8 2f       	mov	r28, r24
     4ee:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_last_receive_data>
     4f2:	2c 2f       	mov	r18, r28
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	32 2f       	mov	r19, r18
     4f8:	22 27       	eor	r18, r18
     4fa:	28 2b       	or	r18, r24
     4fc:	31 95       	neg	r19
     4fe:	21 95       	neg	r18
     500:	31 09       	sbc	r19, r1
     502:	f8 01       	movw	r30, r16
     504:	35 83       	std	Z+5, r19	; 0x05
     506:	24 83       	std	Z+4, r18	; 0x04
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <mpu9150_get_raw_all>:
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	7c 01       	movw	r14, r24
     520:	eb 01       	movw	r28, r22
     522:	8a 01       	movw	r16, r20
     524:	88 e6       	ldi	r24, 0x68	; 104
     526:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_start_SLA_W>
     52a:	8b e3       	ldi	r24, 0x3B	; 59
     52c:	0e 94 8f 00 	call	0x11e	; 0x11e <i2c_trans_data>
     530:	88 e6       	ldi	r24, 0x68	; 104
     532:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start_SLA_R>
     536:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     53a:	d8 2e       	mov	r13, r24
     53c:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     540:	2d 2d       	mov	r18, r13
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	32 2f       	mov	r19, r18
     546:	22 27       	eor	r18, r18
     548:	28 2b       	or	r18, r24
     54a:	35 95       	asr	r19
     54c:	27 95       	ror	r18
     54e:	35 95       	asr	r19
     550:	27 95       	ror	r18
     552:	35 95       	asr	r19
     554:	27 95       	ror	r18
     556:	35 95       	asr	r19
     558:	27 95       	ror	r18
     55a:	f7 01       	movw	r30, r14
     55c:	31 83       	std	Z+1, r19	; 0x01
     55e:	20 83       	st	Z, r18
     560:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     564:	d8 2e       	mov	r13, r24
     566:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     56a:	2d 2d       	mov	r18, r13
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	32 2f       	mov	r19, r18
     570:	22 27       	eor	r18, r18
     572:	28 2b       	or	r18, r24
     574:	35 95       	asr	r19
     576:	27 95       	ror	r18
     578:	35 95       	asr	r19
     57a:	27 95       	ror	r18
     57c:	35 95       	asr	r19
     57e:	27 95       	ror	r18
     580:	35 95       	asr	r19
     582:	27 95       	ror	r18
     584:	f7 01       	movw	r30, r14
     586:	33 83       	std	Z+3, r19	; 0x03
     588:	22 83       	std	Z+2, r18	; 0x02
     58a:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     58e:	d8 2e       	mov	r13, r24
     590:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     594:	2d 2d       	mov	r18, r13
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	32 2f       	mov	r19, r18
     59a:	22 27       	eor	r18, r18
     59c:	28 2b       	or	r18, r24
     59e:	35 95       	asr	r19
     5a0:	27 95       	ror	r18
     5a2:	35 95       	asr	r19
     5a4:	27 95       	ror	r18
     5a6:	35 95       	asr	r19
     5a8:	27 95       	ror	r18
     5aa:	35 95       	asr	r19
     5ac:	27 95       	ror	r18
     5ae:	f7 01       	movw	r30, r14
     5b0:	35 83       	std	Z+5, r19	; 0x05
     5b2:	24 83       	std	Z+4, r18	; 0x04
     5b4:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5b8:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5bc:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5c0:	f8 2e       	mov	r15, r24
     5c2:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5c6:	2f 2d       	mov	r18, r15
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	32 2f       	mov	r19, r18
     5cc:	22 27       	eor	r18, r18
     5ce:	28 2b       	or	r18, r24
     5d0:	39 83       	std	Y+1, r19	; 0x01
     5d2:	28 83       	st	Y, r18
     5d4:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5d8:	f8 2e       	mov	r15, r24
     5da:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5de:	2f 2d       	mov	r18, r15
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	32 2f       	mov	r19, r18
     5e4:	22 27       	eor	r18, r18
     5e6:	28 2b       	or	r18, r24
     5e8:	3b 83       	std	Y+3, r19	; 0x03
     5ea:	2a 83       	std	Y+2, r18	; 0x02
     5ec:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5f0:	f8 2e       	mov	r15, r24
     5f2:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     5f6:	2f 2d       	mov	r18, r15
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	32 2f       	mov	r19, r18
     5fc:	22 27       	eor	r18, r18
     5fe:	28 2b       	or	r18, r24
     600:	3d 83       	std	Y+5, r19	; 0x05
     602:	2c 83       	std	Y+4, r18	; 0x04
     604:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     608:	c8 2f       	mov	r28, r24
     60a:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     60e:	2c 2f       	mov	r18, r28
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	32 2f       	mov	r19, r18
     614:	22 27       	eor	r18, r18
     616:	28 2b       	or	r18, r24
     618:	f8 01       	movw	r30, r16
     61a:	31 83       	std	Z+1, r19	; 0x01
     61c:	20 83       	st	Z, r18
     61e:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     622:	c8 2f       	mov	r28, r24
     624:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     628:	2c 2f       	mov	r18, r28
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	32 2f       	mov	r19, r18
     62e:	22 27       	eor	r18, r18
     630:	28 2b       	or	r18, r24
     632:	f8 01       	movw	r30, r16
     634:	33 83       	std	Z+3, r19	; 0x03
     636:	22 83       	std	Z+2, r18	; 0x02
     638:	0e 94 ac 00 	call	0x158	; 0x158 <i2c_receive_data>
     63c:	c8 2f       	mov	r28, r24
     63e:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_last_receive_data>
     642:	2c 2f       	mov	r18, r28
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	32 2f       	mov	r19, r18
     648:	22 27       	eor	r18, r18
     64a:	28 2b       	or	r18, r24
     64c:	31 95       	neg	r19
     64e:	21 95       	neg	r18
     650:	31 09       	sbc	r19, r1
     652:	f8 01       	movw	r30, r16
     654:	35 83       	std	Z+5, r19	; 0x05
     656:	24 83       	std	Z+4, r18	; 0x04
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	08 95       	ret

00000668 <mpu9150_get_gyro>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	0e 94 15 02 	call	0x42a	; 0x42a <mpu9150_get_raw_gyro>
     672:	e9 e9       	ldi	r30, 0x99	; 153
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	88 81       	ld	r24, Y
     678:	99 81       	ldd	r25, Y+1	; 0x01
     67a:	20 81       	ld	r18, Z
     67c:	31 81       	ldd	r19, Z+1	; 0x01
     67e:	82 1b       	sub	r24, r18
     680:	93 0b       	sbc	r25, r19
     682:	99 83       	std	Y+1, r25	; 0x01
     684:	88 83       	st	Y, r24
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	9b 81       	ldd	r25, Y+3	; 0x03
     68a:	22 81       	ldd	r18, Z+2	; 0x02
     68c:	33 81       	ldd	r19, Z+3	; 0x03
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	9b 83       	std	Y+3, r25	; 0x03
     694:	8a 83       	std	Y+2, r24	; 0x02
     696:	8c 81       	ldd	r24, Y+4	; 0x04
     698:	9d 81       	ldd	r25, Y+5	; 0x05
     69a:	24 81       	ldd	r18, Z+4	; 0x04
     69c:	35 81       	ldd	r19, Z+5	; 0x05
     69e:	82 1b       	sub	r24, r18
     6a0:	93 0b       	sbc	r25, r19
     6a2:	9d 83       	std	Y+5, r25	; 0x05
     6a4:	8c 83       	std	Y+4, r24	; 0x04
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <mpu9150_get_mag>:
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	ec 01       	movw	r28, r24
     6b2:	0e 94 4d 02 	call	0x49a	; 0x49a <mpu9150_get_raw_mag>
     6b6:	a3 e9       	ldi	r26, 0x93	; 147
     6b8:	b1 e0       	ldi	r27, 0x01	; 1
     6ba:	28 81       	ld	r18, Y
     6bc:	39 81       	ldd	r19, Y+1	; 0x01
     6be:	8d 91       	ld	r24, X+
     6c0:	9c 91       	ld	r25, X
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	28 1b       	sub	r18, r24
     6c6:	39 0b       	sbc	r19, r25
     6c8:	ed e8       	ldi	r30, 0x8D	; 141
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	40 81       	ld	r20, Z
     6ce:	51 81       	ldd	r21, Z+1	; 0x01
     6d0:	24 9f       	mul	r18, r20
     6d2:	c0 01       	movw	r24, r0
     6d4:	25 9f       	mul	r18, r21
     6d6:	90 0d       	add	r25, r0
     6d8:	34 9f       	mul	r19, r20
     6da:	90 0d       	add	r25, r0
     6dc:	11 24       	eor	r1, r1
     6de:	95 95       	asr	r25
     6e0:	87 95       	ror	r24
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	95 95       	asr	r25
     6ec:	87 95       	ror	r24
     6ee:	95 95       	asr	r25
     6f0:	87 95       	ror	r24
     6f2:	99 83       	std	Y+1, r25	; 0x01
     6f4:	88 83       	st	Y, r24
     6f6:	2a 81       	ldd	r18, Y+2	; 0x02
     6f8:	3b 81       	ldd	r19, Y+3	; 0x03
     6fa:	12 96       	adiw	r26, 0x02	; 2
     6fc:	8d 91       	ld	r24, X+
     6fe:	9c 91       	ld	r25, X
     700:	13 97       	sbiw	r26, 0x03	; 3
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	42 81       	ldd	r20, Z+2	; 0x02
     708:	53 81       	ldd	r21, Z+3	; 0x03
     70a:	24 9f       	mul	r18, r20
     70c:	c0 01       	movw	r24, r0
     70e:	25 9f       	mul	r18, r21
     710:	90 0d       	add	r25, r0
     712:	34 9f       	mul	r19, r20
     714:	90 0d       	add	r25, r0
     716:	11 24       	eor	r1, r1
     718:	95 95       	asr	r25
     71a:	87 95       	ror	r24
     71c:	95 95       	asr	r25
     71e:	87 95       	ror	r24
     720:	95 95       	asr	r25
     722:	87 95       	ror	r24
     724:	95 95       	asr	r25
     726:	87 95       	ror	r24
     728:	95 95       	asr	r25
     72a:	87 95       	ror	r24
     72c:	9b 83       	std	Y+3, r25	; 0x03
     72e:	8a 83       	std	Y+2, r24	; 0x02
     730:	2c 81       	ldd	r18, Y+4	; 0x04
     732:	3d 81       	ldd	r19, Y+5	; 0x05
     734:	14 96       	adiw	r26, 0x04	; 4
     736:	8d 91       	ld	r24, X+
     738:	9c 91       	ld	r25, X
     73a:	15 97       	sbiw	r26, 0x05	; 5
     73c:	28 1b       	sub	r18, r24
     73e:	39 0b       	sbc	r19, r25
     740:	44 81       	ldd	r20, Z+4	; 0x04
     742:	55 81       	ldd	r21, Z+5	; 0x05
     744:	24 9f       	mul	r18, r20
     746:	c0 01       	movw	r24, r0
     748:	25 9f       	mul	r18, r21
     74a:	90 0d       	add	r25, r0
     74c:	34 9f       	mul	r19, r20
     74e:	90 0d       	add	r25, r0
     750:	11 24       	eor	r1, r1
     752:	95 95       	asr	r25
     754:	87 95       	ror	r24
     756:	95 95       	asr	r25
     758:	87 95       	ror	r24
     75a:	95 95       	asr	r25
     75c:	87 95       	ror	r24
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	95 95       	asr	r25
     764:	87 95       	ror	r24
     766:	9d 83       	std	Y+5, r25	; 0x05
     768:	8c 83       	std	Y+4, r24	; 0x04
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <mpu9150_get_all>:

void mpu9150_get_all(int16_t *acc_xyz,int16_t *gyro_xyz,int16_t *mag_xyz)
{
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	7c 01       	movw	r14, r24
     77e:	8b 01       	movw	r16, r22
     780:	ea 01       	movw	r28, r20
    mpu9150_get_raw_all(acc_xyz,gyro_xyz,mag_xyz);
     782:	0e 94 88 02 	call	0x510	; 0x510 <mpu9150_get_raw_all>
    acc_xyz[0] -= acc_xyz_offset[0];
     786:	ef e9       	ldi	r30, 0x9F	; 159
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	d7 01       	movw	r26, r14
     78c:	8d 91       	ld	r24, X+
     78e:	9c 91       	ld	r25, X
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	20 81       	ld	r18, Z
     794:	31 81       	ldd	r19, Z+1	; 0x01
     796:	82 1b       	sub	r24, r18
     798:	93 0b       	sbc	r25, r19
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	9c 93       	st	X, r25
     79e:	8e 93       	st	-X, r24
    acc_xyz[1] -= acc_xyz_offset[1];
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	8d 91       	ld	r24, X+
     7a4:	9c 91       	ld	r25, X
     7a6:	13 97       	sbiw	r26, 0x03	; 3
     7a8:	22 81       	ldd	r18, Z+2	; 0x02
     7aa:	33 81       	ldd	r19, Z+3	; 0x03
     7ac:	82 1b       	sub	r24, r18
     7ae:	93 0b       	sbc	r25, r19
     7b0:	13 96       	adiw	r26, 0x03	; 3
     7b2:	9c 93       	st	X, r25
     7b4:	8e 93       	st	-X, r24
     7b6:	12 97       	sbiw	r26, 0x02	; 2
    acc_xyz[2] -= acc_xyz_offset[2];
     7b8:	14 96       	adiw	r26, 0x04	; 4
     7ba:	8d 91       	ld	r24, X+
     7bc:	9c 91       	ld	r25, X
     7be:	15 97       	sbiw	r26, 0x05	; 5
     7c0:	24 81       	ldd	r18, Z+4	; 0x04
     7c2:	35 81       	ldd	r19, Z+5	; 0x05
     7c4:	82 1b       	sub	r24, r18
     7c6:	93 0b       	sbc	r25, r19
     7c8:	15 96       	adiw	r26, 0x05	; 5
     7ca:	9c 93       	st	X, r25
     7cc:	8e 93       	st	-X, r24
     7ce:	14 97       	sbiw	r26, 0x04	; 4
    gyro_xyz[0] -= gyro_xyz_offset[0];
     7d0:	e9 e9       	ldi	r30, 0x99	; 153
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
     7d4:	d8 01       	movw	r26, r16
     7d6:	8d 91       	ld	r24, X+
     7d8:	9c 91       	ld	r25, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	20 81       	ld	r18, Z
     7de:	31 81       	ldd	r19, Z+1	; 0x01
     7e0:	82 1b       	sub	r24, r18
     7e2:	93 0b       	sbc	r25, r19
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	9c 93       	st	X, r25
     7e8:	8e 93       	st	-X, r24
    gyro_xyz[1] -= gyro_xyz_offset[1];
     7ea:	12 96       	adiw	r26, 0x02	; 2
     7ec:	8d 91       	ld	r24, X+
     7ee:	9c 91       	ld	r25, X
     7f0:	13 97       	sbiw	r26, 0x03	; 3
     7f2:	22 81       	ldd	r18, Z+2	; 0x02
     7f4:	33 81       	ldd	r19, Z+3	; 0x03
     7f6:	82 1b       	sub	r24, r18
     7f8:	93 0b       	sbc	r25, r19
     7fa:	13 96       	adiw	r26, 0x03	; 3
     7fc:	9c 93       	st	X, r25
     7fe:	8e 93       	st	-X, r24
     800:	12 97       	sbiw	r26, 0x02	; 2
    gyro_xyz[2] -= gyro_xyz_offset[2];
     802:	14 96       	adiw	r26, 0x04	; 4
     804:	8d 91       	ld	r24, X+
     806:	9c 91       	ld	r25, X
     808:	15 97       	sbiw	r26, 0x05	; 5
     80a:	24 81       	ldd	r18, Z+4	; 0x04
     80c:	35 81       	ldd	r19, Z+5	; 0x05
     80e:	82 1b       	sub	r24, r18
     810:	93 0b       	sbc	r25, r19
     812:	15 96       	adiw	r26, 0x05	; 5
     814:	9c 93       	st	X, r25
     816:	8e 93       	st	-X, r24
     818:	14 97       	sbiw	r26, 0x04	; 4
    mag_xyz[0] = (mag_xyz_sensitivity[0] * (mag_xyz[0] - mag_xyz_offset[0]))>>5;
     81a:	a3 e9       	ldi	r26, 0x93	; 147
     81c:	b1 e0       	ldi	r27, 0x01	; 1
     81e:	28 81       	ld	r18, Y
     820:	39 81       	ldd	r19, Y+1	; 0x01
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	11 97       	sbiw	r26, 0x01	; 1
     828:	28 1b       	sub	r18, r24
     82a:	39 0b       	sbc	r19, r25
     82c:	ed e8       	ldi	r30, 0x8D	; 141
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	40 81       	ld	r20, Z
     832:	51 81       	ldd	r21, Z+1	; 0x01
     834:	24 9f       	mul	r18, r20
     836:	c0 01       	movw	r24, r0
     838:	25 9f       	mul	r18, r21
     83a:	90 0d       	add	r25, r0
     83c:	34 9f       	mul	r19, r20
     83e:	90 0d       	add	r25, r0
     840:	11 24       	eor	r1, r1
     842:	95 95       	asr	r25
     844:	87 95       	ror	r24
     846:	95 95       	asr	r25
     848:	87 95       	ror	r24
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	95 95       	asr	r25
     850:	87 95       	ror	r24
     852:	95 95       	asr	r25
     854:	87 95       	ror	r24
     856:	99 83       	std	Y+1, r25	; 0x01
     858:	88 83       	st	Y, r24
    mag_xyz[1] = (mag_xyz_sensitivity[1] * (mag_xyz[1] - mag_xyz_offset[1]))>>5;
     85a:	2a 81       	ldd	r18, Y+2	; 0x02
     85c:	3b 81       	ldd	r19, Y+3	; 0x03
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	8d 91       	ld	r24, X+
     862:	9c 91       	ld	r25, X
     864:	13 97       	sbiw	r26, 0x03	; 3
     866:	28 1b       	sub	r18, r24
     868:	39 0b       	sbc	r19, r25
     86a:	42 81       	ldd	r20, Z+2	; 0x02
     86c:	53 81       	ldd	r21, Z+3	; 0x03
     86e:	24 9f       	mul	r18, r20
     870:	c0 01       	movw	r24, r0
     872:	25 9f       	mul	r18, r21
     874:	90 0d       	add	r25, r0
     876:	34 9f       	mul	r19, r20
     878:	90 0d       	add	r25, r0
     87a:	11 24       	eor	r1, r1
     87c:	95 95       	asr	r25
     87e:	87 95       	ror	r24
     880:	95 95       	asr	r25
     882:	87 95       	ror	r24
     884:	95 95       	asr	r25
     886:	87 95       	ror	r24
     888:	95 95       	asr	r25
     88a:	87 95       	ror	r24
     88c:	95 95       	asr	r25
     88e:	87 95       	ror	r24
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	8a 83       	std	Y+2, r24	; 0x02
    mag_xyz[2] = (mag_xyz_sensitivity[2] * (mag_xyz[2] - mag_xyz_offset[2]))>>5;
     894:	2c 81       	ldd	r18, Y+4	; 0x04
     896:	3d 81       	ldd	r19, Y+5	; 0x05
     898:	14 96       	adiw	r26, 0x04	; 4
     89a:	8d 91       	ld	r24, X+
     89c:	9c 91       	ld	r25, X
     89e:	15 97       	sbiw	r26, 0x05	; 5
     8a0:	28 1b       	sub	r18, r24
     8a2:	39 0b       	sbc	r19, r25
     8a4:	44 81       	ldd	r20, Z+4	; 0x04
     8a6:	55 81       	ldd	r21, Z+5	; 0x05
     8a8:	24 9f       	mul	r18, r20
     8aa:	c0 01       	movw	r24, r0
     8ac:	25 9f       	mul	r18, r21
     8ae:	90 0d       	add	r25, r0
     8b0:	34 9f       	mul	r19, r20
     8b2:	90 0d       	add	r25, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	95 95       	asr	r25
     8b8:	87 95       	ror	r24
     8ba:	95 95       	asr	r25
     8bc:	87 95       	ror	r24
     8be:	95 95       	asr	r25
     8c0:	87 95       	ror	r24
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
     8c6:	95 95       	asr	r25
     8c8:	87 95       	ror	r24
     8ca:	9d 83       	std	Y+5, r25	; 0x05
     8cc:	8c 83       	std	Y+4, r24	; 0x04
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <_mul>:
: \
"r26" \
)

int32_t __attribute__ ((noinline)) _mul(int16_t a, int16_t b)
{
     8dc:	9b 01       	movw	r18, r22
    int32_t r;
    MultiS16X16to32(r, a, b);
     8de:	ac 01       	movw	r20, r24
     8e0:	aa 27       	eor	r26, r26
     8e2:	42 9f       	mul	r20, r18
     8e4:	b0 01       	movw	r22, r0
     8e6:	53 02       	muls	r21, r19
     8e8:	c0 01       	movw	r24, r0
     8ea:	34 03       	mulsu	r19, r20
     8ec:	9a 0b       	sbc	r25, r26
     8ee:	70 0d       	add	r23, r0
     8f0:	81 1d       	adc	r24, r1
     8f2:	9a 1f       	adc	r25, r26
     8f4:	52 03       	mulsu	r21, r18
     8f6:	9a 0b       	sbc	r25, r26
     8f8:	70 0d       	add	r23, r0
     8fa:	81 1d       	adc	r24, r1
     8fc:	9a 1f       	adc	r25, r26
     8fe:	11 24       	eor	r1, r1
    return r;
}
     900:	08 95       	ret

00000902 <InvSqrt>:

float InvSqrt(float x)
{
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
    union{
        int32_t i;
        float   f;
    } conv;
    conv.f = x;
    conv.i = 0x5f1ffff9 - (conv.i >> 1);
     90e:	8b 01       	movw	r16, r22
     910:	9c 01       	movw	r18, r24
     912:	35 95       	asr	r19
     914:	27 95       	ror	r18
     916:	17 95       	ror	r17
     918:	07 95       	ror	r16
     91a:	0f 2e       	mov	r0, r31
     91c:	f9 ef       	ldi	r31, 0xF9	; 249
     91e:	cf 2e       	mov	r12, r31
     920:	dd 24       	eor	r13, r13
     922:	da 94       	dec	r13
     924:	ff e1       	ldi	r31, 0x1F	; 31
     926:	ef 2e       	mov	r14, r31
     928:	ff e5       	ldi	r31, 0x5F	; 95
     92a:	ff 2e       	mov	r15, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	c0 1a       	sub	r12, r16
     930:	d1 0a       	sbc	r13, r17
     932:	e2 0a       	sbc	r14, r18
     934:	f3 0a       	sbc	r15, r19
    return conv.f * (1.68191409f - 0.703952253f * x * conv.f * conv.f);
     936:	27 e3       	ldi	r18, 0x37	; 55
     938:	36 e3       	ldi	r19, 0x36	; 54
     93a:	44 e3       	ldi	r20, 0x34	; 52
     93c:	5f e3       	ldi	r21, 0x3F	; 63
     93e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     942:	a7 01       	movw	r20, r14
     944:	96 01       	movw	r18, r12
     946:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     94a:	a7 01       	movw	r20, r14
     94c:	96 01       	movw	r18, r12
     94e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     952:	9b 01       	movw	r18, r22
     954:	ac 01       	movw	r20, r24
     956:	66 ef       	ldi	r22, 0xF6	; 246
     958:	78 e4       	ldi	r23, 0x48	; 72
     95a:	87 ed       	ldi	r24, 0xD7	; 215
     95c:	9f e3       	ldi	r25, 0x3F	; 63
     95e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__subsf3>
     962:	a7 01       	movw	r20, r14
     964:	96 01       	movw	r18, r12
     966:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
}
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret

00000978 <_atan2>:

int16_t _atan2(int32_t y, int32_t x)
{
     978:	4f 92       	push	r4
     97a:	5f 92       	push	r5
     97c:	6f 92       	push	r6
     97e:	7f 92       	push	r7
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	6b 01       	movw	r12, r22
     992:	7c 01       	movw	r14, r24
     994:	49 01       	movw	r8, r18
     996:	5a 01       	movw	r10, r20
     * 근삿값을 구해줌
     * -1800(-180도) ~ 1800(180도)
     * C. Hastings approximation for atan2()
     * Optimization tricks: http://www.hackersdelight.org/
     */
    float z = y;
     998:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     99c:	2b 01       	movw	r4, r22
     99e:	3c 01       	movw	r6, r24
    int16_t a;
    uint8_t c;
    c = abs(y) < abs(x);
    if ( c ) {z = z / x;} else {z = x / z;}
     9a0:	b7 01       	movw	r22, r14
     9a2:	a6 01       	movw	r20, r12
     9a4:	ff 20       	and	r15, r15
     9a6:	3c f4       	brge	.+14     	; 0x9b6 <_atan2+0x3e>
     9a8:	44 27       	eor	r20, r20
     9aa:	55 27       	eor	r21, r21
     9ac:	ba 01       	movw	r22, r20
     9ae:	4c 19       	sub	r20, r12
     9b0:	5d 09       	sbc	r21, r13
     9b2:	6e 09       	sbc	r22, r14
     9b4:	7f 09       	sbc	r23, r15
     9b6:	d5 01       	movw	r26, r10
     9b8:	c4 01       	movw	r24, r8
     9ba:	bb 20       	and	r11, r11
     9bc:	3c f4       	brge	.+14     	; 0x9cc <_atan2+0x54>
     9be:	88 27       	eor	r24, r24
     9c0:	99 27       	eor	r25, r25
     9c2:	dc 01       	movw	r26, r24
     9c4:	88 19       	sub	r24, r8
     9c6:	99 09       	sbc	r25, r9
     9c8:	aa 09       	sbc	r26, r10
     9ca:	bb 09       	sbc	r27, r11
     9cc:	48 17       	cp	r20, r24
     9ce:	59 07       	cpc	r21, r25
     9d0:	6a 07       	cpc	r22, r26
     9d2:	7b 07       	cpc	r23, r27
     9d4:	44 f5       	brge	.+80     	; 0xa26 <_atan2+0xae>
     9d6:	c5 01       	movw	r24, r10
     9d8:	b4 01       	movw	r22, r8
     9da:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	c3 01       	movw	r24, r6
     9e4:	b2 01       	movw	r22, r4
     9e6:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divsf3>
     9ea:	2b 01       	movw	r4, r22
     9ec:	3c 01       	movw	r6, r24
    a = 2046.43 * (z / (3.5714 +  z * z));
     9ee:	9b 01       	movw	r18, r22
     9f0:	ac 01       	movw	r20, r24
     9f2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     9f6:	21 ed       	ldi	r18, 0xD1	; 209
     9f8:	31 e9       	ldi	r19, 0x91	; 145
     9fa:	44 e6       	ldi	r20, 0x64	; 100
     9fc:	50 e4       	ldi	r21, 0x40	; 64
     9fe:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__addsf3>
     a02:	9b 01       	movw	r18, r22
     a04:	ac 01       	movw	r20, r24
     a06:	c3 01       	movw	r24, r6
     a08:	b2 01       	movw	r22, r4
     a0a:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divsf3>
     a0e:	23 ec       	ldi	r18, 0xC3	; 195
     a10:	3d ec       	ldi	r19, 0xCD	; 205
     a12:	4f ef       	ldi	r20, 0xFF	; 255
     a14:	54 e4       	ldi	r21, 0x44	; 68
     a16:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     a1a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
     a1e:	9b 01       	movw	r18, r22
    if ( c ){
        if (x<0) {
     a20:	bb 20       	and	r11, r11
     a22:	c4 f5       	brge	.+112    	; 0xa94 <_atan2+0x11c>
     a24:	29 c0       	rjmp	.+82     	; 0xa78 <_atan2+0x100>
     */
    float z = y;
    int16_t a;
    uint8_t c;
    c = abs(y) < abs(x);
    if ( c ) {z = z / x;} else {z = x / z;}
     a26:	c5 01       	movw	r24, r10
     a28:	b4 01       	movw	r22, r8
     a2a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     a2e:	a3 01       	movw	r20, r6
     a30:	92 01       	movw	r18, r4
     a32:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divsf3>
     a36:	4b 01       	movw	r8, r22
     a38:	5c 01       	movw	r10, r24
    a = 2046.43 * (z / (3.5714 +  z * z));
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     a42:	21 ed       	ldi	r18, 0xD1	; 209
     a44:	31 e9       	ldi	r19, 0x91	; 145
     a46:	44 e6       	ldi	r20, 0x64	; 100
     a48:	50 e4       	ldi	r21, 0x40	; 64
     a4a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__addsf3>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	c5 01       	movw	r24, r10
     a54:	b4 01       	movw	r22, r8
     a56:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divsf3>
     a5a:	23 ec       	ldi	r18, 0xC3	; 195
     a5c:	3d ec       	ldi	r19, 0xCD	; 205
     a5e:	4f ef       	ldi	r20, 0xFF	; 255
     a60:	54 e4       	ldi	r21, 0x44	; 68
     a62:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     a66:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
            if (y<0) a -= 1800;
            else a += 1800;
        }
    } else {
        a = 900 - a;
        if (y<0) a -= 1800;
     a6a:	ff 20       	and	r15, r15
     a6c:	7c f0       	brlt	.+30     	; 0xa8c <_atan2+0x114>
        if (x<0) {
            if (y<0) a -= 1800;
            else a += 1800;
        }
    } else {
        a = 900 - a;
     a6e:	24 e8       	ldi	r18, 0x84	; 132
     a70:	33 e0       	ldi	r19, 0x03	; 3
     a72:	26 1b       	sub	r18, r22
     a74:	37 0b       	sbc	r19, r23
     a76:	0e c0       	rjmp	.+28     	; 0xa94 <_atan2+0x11c>
    c = abs(y) < abs(x);
    if ( c ) {z = z / x;} else {z = x / z;}
    a = 2046.43 * (z / (3.5714 +  z * z));
    if ( c ){
        if (x<0) {
            if (y<0) a -= 1800;
     a78:	ff 20       	and	r15, r15
     a7a:	24 f4       	brge	.+8      	; 0xa84 <_atan2+0x10c>
     a7c:	9b 01       	movw	r18, r22
     a7e:	28 50       	subi	r18, 0x08	; 8
     a80:	37 40       	sbci	r19, 0x07	; 7
     a82:	08 c0       	rjmp	.+16     	; 0xa94 <_atan2+0x11c>
            else a += 1800;
     a84:	9b 01       	movw	r18, r22
     a86:	28 5f       	subi	r18, 0xF8	; 248
     a88:	38 4f       	sbci	r19, 0xF8	; 248
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <_atan2+0x11c>
        }
    } else {
        a = 900 - a;
        if (y<0) a -= 1800;
     a8c:	2c e7       	ldi	r18, 0x7C	; 124
     a8e:	3c ef       	ldi	r19, 0xFC	; 252
     a90:	26 1b       	sub	r18, r22
     a92:	37 0b       	sbc	r19, r23
    }
    return a;
}
     a94:	c9 01       	movw	r24, r18
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	7f 90       	pop	r7
     aa8:	6f 90       	pop	r6
     aaa:	5f 90       	pop	r5
     aac:	4f 90       	pop	r4
     aae:	08 95       	ret

00000ab0 <rpy_setup>:

void rpy_setup(void)
{
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <rpy_setup+0x6>
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <rpy_setup+0x8>
     ab8:	00 d0       	rcall	.+0      	; 0xaba <rpy_setup+0xa>
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
    int16_t mag[3];
    mpu9150_get_mag(mag);
     abe:	ce 01       	movw	r24, r28
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	0e 94 56 03 	call	0x6ac	; 0x6ac <mpu9150_get_mag>
    acc_vector.xyz.x = 0;
     ac6:	ed eb       	ldi	r30, 0xBD	; 189
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	13 82       	std	Z+3, r1	; 0x03
     acc:	12 82       	std	Z+2, r1	; 0x02
    acc_vector.xyz.y = 0;
     ace:	17 82       	std	Z+7, r1	; 0x07
     ad0:	16 82       	std	Z+6, r1	; 0x06
    acc_vector.xyz.z = ACC_1G;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	93 87       	std	Z+11, r25	; 0x0b
     ad8:	82 87       	std	Z+10, r24	; 0x0a
    mag_vector.xyz.x = mag[0];
     ada:	e5 ea       	ldi	r30, 0xA5	; 165
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	93 83       	std	Z+3, r25	; 0x03
     ae4:	82 83       	std	Z+2, r24	; 0x02
    mag_vector.xyz.y = mag[1];
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	97 83       	std	Z+7, r25	; 0x07
     aec:	86 83       	std	Z+6, r24	; 0x06
    mag_vector.xyz.z = mag[2];
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	93 87       	std	Z+11, r25	; 0x0b
     af4:	82 87       	std	Z+10, r24	; 0x0a
}
     af6:	26 96       	adiw	r28, 0x06	; 6
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <rpy_get_rpy>:

void rpy_get_rpy(int16_t *rpy)
{
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	68 97       	sbiw	r28, 0x18	; 24
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	98 8f       	std	Y+24, r25	; 0x18
     b3e:	8f 8b       	std	Y+23, r24	; 0x17
    uint32_t new_micros = tc_micros();
     b40:	0e 94 65 0a 	call	0x14ca	; 0x14ca <tc_micros>
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24
    dt = (new_micros - old_micros) * GYRO2RAD_SCALE;
     b48:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <old_micros>
     b4c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <old_micros+0x1>
     b50:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <old_micros+0x2>
     b54:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <old_micros+0x3>
     b58:	a7 01       	movw	r20, r14
     b5a:	96 01       	movw	r18, r12
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	ca 01       	movw	r24, r20
     b66:	b9 01       	movw	r22, r18
     b68:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__floatunsisf>
     b6c:	2e e1       	ldi	r18, 0x1E	; 30
     b6e:	34 e4       	ldi	r19, 0x44	; 68
     b70:	42 e9       	ldi	r20, 0x92	; 146
     b72:	58 e3       	ldi	r21, 0x38	; 56
     b74:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     b78:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <dt>
     b7c:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <dt+0x1>
     b80:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <dt+0x2>
     b84:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <dt+0x3>
    old_micros = new_micros;
     b88:	c0 92 c9 01 	sts	0x01C9, r12	; 0x8001c9 <old_micros>
     b8c:	d0 92 ca 01 	sts	0x01CA, r13	; 0x8001ca <old_micros+0x1>
     b90:	e0 92 cb 01 	sts	0x01CB, r14	; 0x8001cb <old_micros+0x2>
     b94:	f0 92 cc 01 	sts	0x01CC, r15	; 0x8001cc <old_micros+0x3>
    int16_t acc[3],gyro[3],mag[3];

    mpu9150_get_all(acc,gyro,mag);
     b98:	ae 01       	movw	r20, r28
     b9a:	43 5f       	subi	r20, 0xF3	; 243
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	be 01       	movw	r22, r28
     ba0:	69 5f       	subi	r22, 0xF9	; 249
     ba2:	7f 4f       	sbci	r23, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	0e 94 b8 03 	call	0x770	; 0x770 <mpu9150_get_all>
    
	int16_t delta_rad[3];
    delta_rad[0] = ((gyro[0] + old_gyro[0])>>1) * dt;
     bac:	c0 90 d3 01 	lds	r12, 0x01D3	; 0x8001d3 <dt>
     bb0:	d0 90 d4 01 	lds	r13, 0x01D4	; 0x8001d4 <dt+0x1>
     bb4:	e0 90 d5 01 	lds	r14, 0x01D5	; 0x8001d5 <dt+0x2>
     bb8:	f0 90 d6 01 	lds	r15, 0x01D6	; 0x8001d6 <dt+0x3>
     bbc:	07 ed       	ldi	r16, 0xD7	; 215
     bbe:	11 e0       	ldi	r17, 0x01	; 1
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	d8 01       	movw	r26, r16
     bc6:	8d 91       	ld	r24, X+
     bc8:	9c 91       	ld	r25, X
     bca:	68 0f       	add	r22, r24
     bcc:	79 1f       	adc	r23, r25
     bce:	75 95       	asr	r23
     bd0:	67 95       	ror	r22
     bd2:	07 2e       	mov	r0, r23
     bd4:	00 0c       	add	r0, r0
     bd6:	88 0b       	sbc	r24, r24
     bd8:	99 0b       	sbc	r25, r25
     bda:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     bde:	a7 01       	movw	r20, r14
     be0:	96 01       	movw	r18, r12
     be2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     be6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
     bea:	4b 01       	movw	r8, r22
     bec:	5c 01       	movw	r10, r24
    delta_rad[1] = ((gyro[1] + old_gyro[1])>>1) * dt;
     bee:	69 85       	ldd	r22, Y+9	; 0x09
     bf0:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf2:	f8 01       	movw	r30, r16
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	68 0f       	add	r22, r24
     bfa:	79 1f       	adc	r23, r25
     bfc:	75 95       	asr	r23
     bfe:	67 95       	ror	r22
     c00:	07 2e       	mov	r0, r23
     c02:	00 0c       	add	r0, r0
     c04:	88 0b       	sbc	r24, r24
     c06:	99 0b       	sbc	r25, r25
     c08:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     c0c:	a7 01       	movw	r20, r14
     c0e:	96 01       	movw	r18, r12
     c10:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     c14:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
     c18:	2b 01       	movw	r4, r22
     c1a:	3c 01       	movw	r6, r24
    delta_rad[2] = ((gyro[2] + old_gyro[2])>>1) * dt;
     c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c20:	d8 01       	movw	r26, r16
     c22:	14 96       	adiw	r26, 0x04	; 4
     c24:	8d 91       	ld	r24, X+
     c26:	9c 91       	ld	r25, X
     c28:	15 97       	sbiw	r26, 0x05	; 5
     c2a:	68 0f       	add	r22, r24
     c2c:	79 1f       	adc	r23, r25
     c2e:	75 95       	asr	r23
     c30:	67 95       	ror	r22
     c32:	07 2e       	mov	r0, r23
     c34:	00 0c       	add	r0, r0
     c36:	88 0b       	sbc	r24, r24
     c38:	99 0b       	sbc	r25, r25
     c3a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     c3e:	a7 01       	movw	r20, r14
     c40:	96 01       	movw	r18, r12
     c42:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     c46:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
     c4a:	6b 8b       	std	Y+19, r22	; 0x13
     c4c:	7c 8b       	std	Y+20, r23	; 0x14
     c4e:	8d 8b       	std	Y+21, r24	; 0x15
     c50:	9e 8b       	std	Y+22, r25	; 0x16

	uart0_write_i16(delta_rad[0]);
     c52:	c4 01       	movw	r24, r8
     c54:	0e 94 c4 0b 	call	0x1788	; 0x1788 <uart0_write_i16>
	uart0_write('\n');
     c58:	8a e0       	ldi	r24, 0x0A	; 10
     c5a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <uart0_write>
	
    // low pass filter
    acc_temp_xyz[0] -= acc_lpf_xyz[0];
    acc_temp_xyz[1] -= acc_lpf_xyz[1];
     c5e:	e1 eb       	ldi	r30, 0xB1	; 177
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	0f 2e       	mov	r0, r31
     c64:	fd ec       	ldi	r31, 0xCD	; 205
     c66:	2f 2e       	mov	r2, r31
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	3f 2e       	mov	r3, r31
     c6c:	f0 2d       	mov	r31, r0
     c6e:	d1 01       	movw	r26, r2
     c70:	12 96       	adiw	r26, 0x02	; 2
     c72:	8d 91       	ld	r24, X+
     c74:	9c 91       	ld	r25, X
     c76:	13 97       	sbiw	r26, 0x03	; 3
     c78:	09 2e       	mov	r0, r25
     c7a:	00 0c       	add	r0, r0
     c7c:	aa 0b       	sbc	r26, r26
     c7e:	bb 0b       	sbc	r27, r27
     c80:	44 81       	ldd	r20, Z+4	; 0x04
     c82:	55 81       	ldd	r21, Z+5	; 0x05
     c84:	66 81       	ldd	r22, Z+6	; 0x06
     c86:	77 81       	ldd	r23, Z+7	; 0x07
     c88:	48 1b       	sub	r20, r24
     c8a:	59 0b       	sbc	r21, r25
     c8c:	6a 0b       	sbc	r22, r26
     c8e:	7b 0b       	sbc	r23, r27
    acc_temp_xyz[2] -= acc_lpf_xyz[2];
     c90:	d1 01       	movw	r26, r2
     c92:	14 96       	adiw	r26, 0x04	; 4
     c94:	0d 91       	ld	r16, X+
     c96:	1c 91       	ld	r17, X
     c98:	15 97       	sbiw	r26, 0x05	; 5
     c9a:	01 2e       	mov	r0, r17
     c9c:	00 0c       	add	r0, r0
     c9e:	22 0b       	sbc	r18, r18
     ca0:	33 0b       	sbc	r19, r19
     ca2:	80 85       	ldd	r24, Z+8	; 0x08
     ca4:	91 85       	ldd	r25, Z+9	; 0x09
     ca6:	a2 85       	ldd	r26, Z+10	; 0x0a
     ca8:	b3 85       	ldd	r27, Z+11	; 0x0b
     caa:	6c 01       	movw	r12, r24
     cac:	7d 01       	movw	r14, r26
     cae:	c0 1a       	sub	r12, r16
     cb0:	d1 0a       	sbc	r13, r17
     cb2:	e2 0a       	sbc	r14, r18
     cb4:	f3 0a       	sbc	r15, r19
    acc_temp_xyz[0] += acc[0];
     cb6:	d1 01       	movw	r26, r2
     cb8:	8d 91       	ld	r24, X+
     cba:	9c 91       	ld	r25, X
     cbc:	09 2e       	mov	r0, r25
     cbe:	00 0c       	add	r0, r0
     cc0:	aa 0b       	sbc	r26, r26
     cc2:	bb 0b       	sbc	r27, r27
     cc4:	00 81       	ld	r16, Z
     cc6:	11 81       	ldd	r17, Z+1	; 0x01
     cc8:	22 81       	ldd	r18, Z+2	; 0x02
     cca:	33 81       	ldd	r19, Z+3	; 0x03
     ccc:	08 1b       	sub	r16, r24
     cce:	19 0b       	sbc	r17, r25
     cd0:	2a 0b       	sbc	r18, r26
     cd2:	3b 0b       	sbc	r19, r27
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	09 2e       	mov	r0, r25
     cda:	00 0c       	add	r0, r0
     cdc:	aa 0b       	sbc	r26, r26
     cde:	bb 0b       	sbc	r27, r27
     ce0:	08 0f       	add	r16, r24
     ce2:	19 1f       	adc	r17, r25
     ce4:	2a 1f       	adc	r18, r26
     ce6:	3b 1f       	adc	r19, r27
     ce8:	00 83       	st	Z, r16
     cea:	11 83       	std	Z+1, r17	; 0x01
     cec:	22 83       	std	Z+2, r18	; 0x02
     cee:	33 83       	std	Z+3, r19	; 0x03
    acc_temp_xyz[1] += acc[1];
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	09 2e       	mov	r0, r25
     cf6:	00 0c       	add	r0, r0
     cf8:	aa 0b       	sbc	r26, r26
     cfa:	bb 0b       	sbc	r27, r27
     cfc:	48 0f       	add	r20, r24
     cfe:	59 1f       	adc	r21, r25
     d00:	6a 1f       	adc	r22, r26
     d02:	7b 1f       	adc	r23, r27
     d04:	44 83       	std	Z+4, r20	; 0x04
     d06:	55 83       	std	Z+5, r21	; 0x05
     d08:	66 83       	std	Z+6, r22	; 0x06
     d0a:	77 83       	std	Z+7, r23	; 0x07
    acc_temp_xyz[2] += acc[2];
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	09 2e       	mov	r0, r25
     d12:	00 0c       	add	r0, r0
     d14:	aa 0b       	sbc	r26, r26
     d16:	bb 0b       	sbc	r27, r27
     d18:	8c 0d       	add	r24, r12
     d1a:	9d 1d       	adc	r25, r13
     d1c:	ae 1d       	adc	r26, r14
     d1e:	bf 1d       	adc	r27, r15
     d20:	80 87       	std	Z+8, r24	; 0x08
     d22:	91 87       	std	Z+9, r25	; 0x09
     d24:	a2 87       	std	Z+10, r26	; 0x0a
     d26:	b3 87       	std	Z+11, r27	; 0x0b
    acc_lpf_xyz[0] = acc_temp_xyz[0]>>ACC_LPF_FACTOR;
     d28:	68 94       	set
     d2a:	14 f8       	bld	r1, 4
     d2c:	35 95       	asr	r19
     d2e:	27 95       	ror	r18
     d30:	17 95       	ror	r17
     d32:	07 95       	ror	r16
     d34:	16 94       	lsr	r1
     d36:	d1 f7       	brne	.-12     	; 0xd2c <rpy_get_rpy+0x224>
     d38:	f1 01       	movw	r30, r2
     d3a:	11 83       	std	Z+1, r17	; 0x01
     d3c:	00 83       	st	Z, r16
    acc_lpf_xyz[1] = acc_temp_xyz[1]>>ACC_LPF_FACTOR;
     d3e:	68 94       	set
     d40:	14 f8       	bld	r1, 4
     d42:	75 95       	asr	r23
     d44:	67 95       	ror	r22
     d46:	57 95       	ror	r21
     d48:	47 95       	ror	r20
     d4a:	16 94       	lsr	r1
     d4c:	d1 f7       	brne	.-12     	; 0xd42 <rpy_get_rpy+0x23a>
     d4e:	53 83       	std	Z+3, r21	; 0x03
     d50:	42 83       	std	Z+2, r20	; 0x02
    acc_lpf_xyz[2] = acc_temp_xyz[2]>>ACC_LPF_FACTOR;
     d52:	68 94       	set
     d54:	14 f8       	bld	r1, 4
     d56:	b5 95       	asr	r27
     d58:	a7 95       	ror	r26
     d5a:	97 95       	ror	r25
     d5c:	87 95       	ror	r24
     d5e:	16 94       	lsr	r1
     d60:	d1 f7       	brne	.-12     	; 0xd56 <rpy_get_rpy+0x24e>
     d62:	95 83       	std	Z+5, r25	; 0x05
     d64:	84 83       	std	Z+4, r24	; 0x04

    // rotation matrix
    acc_vector.XYZ.X += _mul(acc_vector.xyz.y , delta_rad[2]) - _mul(acc_vector.xyz.z , delta_rad[1]);
     d66:	0d eb       	ldi	r16, 0xBD	; 189
     d68:	11 e0       	ldi	r17, 0x01	; 1
     d6a:	6b 89       	ldd	r22, Y+19	; 0x13
     d6c:	7c 89       	ldd	r23, Y+20	; 0x14
     d6e:	d8 01       	movw	r26, r16
     d70:	16 96       	adiw	r26, 0x06	; 6
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	17 97       	sbiw	r26, 0x07	; 7
     d78:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     d7c:	6b 01       	movw	r12, r22
     d7e:	7c 01       	movw	r14, r24
     d80:	b2 01       	movw	r22, r4
     d82:	f8 01       	movw	r30, r16
     d84:	82 85       	ldd	r24, Z+10	; 0x0a
     d86:	93 85       	ldd	r25, Z+11	; 0x0b
     d88:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     d8c:	c6 1a       	sub	r12, r22
     d8e:	d7 0a       	sbc	r13, r23
     d90:	e8 0a       	sbc	r14, r24
     d92:	f9 0a       	sbc	r15, r25
     d94:	f8 01       	movw	r30, r16
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	a2 81       	ldd	r26, Z+2	; 0x02
     d9c:	b3 81       	ldd	r27, Z+3	; 0x03
     d9e:	c8 0e       	add	r12, r24
     da0:	d9 1e       	adc	r13, r25
     da2:	ea 1e       	adc	r14, r26
     da4:	fb 1e       	adc	r15, r27
     da6:	c0 82       	st	Z, r12
     da8:	d1 82       	std	Z+1, r13	; 0x01
     daa:	e2 82       	std	Z+2, r14	; 0x02
     dac:	f3 82       	std	Z+3, r15	; 0x03
    acc_vector.XYZ.Y += _mul(acc_vector.xyz.z , delta_rad[0]) - _mul(acc_vector.xyz.x , delta_rad[2]);
     dae:	b4 01       	movw	r22, r8
     db0:	82 85       	ldd	r24, Z+10	; 0x0a
     db2:	93 85       	ldd	r25, Z+11	; 0x0b
     db4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     db8:	6b 01       	movw	r12, r22
     dba:	7c 01       	movw	r14, r24
     dbc:	6b 89       	ldd	r22, Y+19	; 0x13
     dbe:	7c 89       	ldd	r23, Y+20	; 0x14
     dc0:	f8 01       	movw	r30, r16
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     dca:	c6 1a       	sub	r12, r22
     dcc:	d7 0a       	sbc	r13, r23
     dce:	e8 0a       	sbc	r14, r24
     dd0:	f9 0a       	sbc	r15, r25
     dd2:	f8 01       	movw	r30, r16
     dd4:	84 81       	ldd	r24, Z+4	; 0x04
     dd6:	95 81       	ldd	r25, Z+5	; 0x05
     dd8:	a6 81       	ldd	r26, Z+6	; 0x06
     dda:	b7 81       	ldd	r27, Z+7	; 0x07
     ddc:	c8 0e       	add	r12, r24
     dde:	d9 1e       	adc	r13, r25
     de0:	ea 1e       	adc	r14, r26
     de2:	fb 1e       	adc	r15, r27
     de4:	c4 82       	std	Z+4, r12	; 0x04
     de6:	d5 82       	std	Z+5, r13	; 0x05
     de8:	e6 82       	std	Z+6, r14	; 0x06
     dea:	f7 82       	std	Z+7, r15	; 0x07
    acc_vector.XYZ.Z += _mul(acc_vector.xyz.x , delta_rad[1]) - _mul(acc_vector.xyz.y , delta_rad[0]);
     dec:	b2 01       	movw	r22, r4
     dee:	82 81       	ldd	r24, Z+2	; 0x02
     df0:	93 81       	ldd	r25, Z+3	; 0x03
     df2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
     dfa:	b4 01       	movw	r22, r8
     dfc:	f8 01       	movw	r30, r16
     dfe:	86 81       	ldd	r24, Z+6	; 0x06
     e00:	97 81       	ldd	r25, Z+7	; 0x07
     e02:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     e06:	c6 1a       	sub	r12, r22
     e08:	d7 0a       	sbc	r13, r23
     e0a:	e8 0a       	sbc	r14, r24
     e0c:	f9 0a       	sbc	r15, r25
     e0e:	f8 01       	movw	r30, r16
     e10:	80 85       	ldd	r24, Z+8	; 0x08
     e12:	91 85       	ldd	r25, Z+9	; 0x09
     e14:	a2 85       	ldd	r26, Z+10	; 0x0a
     e16:	b3 85       	ldd	r27, Z+11	; 0x0b
     e18:	c8 0e       	add	r12, r24
     e1a:	d9 1e       	adc	r13, r25
     e1c:	ea 1e       	adc	r14, r26
     e1e:	fb 1e       	adc	r15, r27
     e20:	c0 86       	std	Z+8, r12	; 0x08
     e22:	d1 86       	std	Z+9, r13	; 0x09
     e24:	e2 86       	std	Z+10, r14	; 0x0a
     e26:	f3 86       	std	Z+11, r15	; 0x0b
    mag_vector.XYZ.X += _mul(mag_vector.xyz.y , delta_rad[2]) - _mul(mag_vector.xyz.z , delta_rad[1]);
     e28:	05 ea       	ldi	r16, 0xA5	; 165
     e2a:	11 e0       	ldi	r17, 0x01	; 1
     e2c:	6b 89       	ldd	r22, Y+19	; 0x13
     e2e:	7c 89       	ldd	r23, Y+20	; 0x14
     e30:	f8 01       	movw	r30, r16
     e32:	86 81       	ldd	r24, Z+6	; 0x06
     e34:	97 81       	ldd	r25, Z+7	; 0x07
     e36:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     e3a:	6b 01       	movw	r12, r22
     e3c:	7c 01       	movw	r14, r24
     e3e:	b2 01       	movw	r22, r4
     e40:	d8 01       	movw	r26, r16
     e42:	1a 96       	adiw	r26, 0x0a	; 10
     e44:	8d 91       	ld	r24, X+
     e46:	9c 91       	ld	r25, X
     e48:	1b 97       	sbiw	r26, 0x0b	; 11
     e4a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     e4e:	c6 1a       	sub	r12, r22
     e50:	d7 0a       	sbc	r13, r23
     e52:	e8 0a       	sbc	r14, r24
     e54:	f9 0a       	sbc	r15, r25
     e56:	f8 01       	movw	r30, r16
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	a2 81       	ldd	r26, Z+2	; 0x02
     e5e:	b3 81       	ldd	r27, Z+3	; 0x03
     e60:	c8 0e       	add	r12, r24
     e62:	d9 1e       	adc	r13, r25
     e64:	ea 1e       	adc	r14, r26
     e66:	fb 1e       	adc	r15, r27
     e68:	c0 82       	st	Z, r12
     e6a:	d1 82       	std	Z+1, r13	; 0x01
     e6c:	e2 82       	std	Z+2, r14	; 0x02
     e6e:	f3 82       	std	Z+3, r15	; 0x03
    mag_vector.XYZ.Y += _mul(mag_vector.xyz.z , delta_rad[0]) - _mul(mag_vector.xyz.x , delta_rad[2]);
     e70:	b4 01       	movw	r22, r8
     e72:	82 85       	ldd	r24, Z+10	; 0x0a
     e74:	93 85       	ldd	r25, Z+11	; 0x0b
     e76:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     e7a:	6b 01       	movw	r12, r22
     e7c:	7c 01       	movw	r14, r24
     e7e:	6b 89       	ldd	r22, Y+19	; 0x13
     e80:	7c 89       	ldd	r23, Y+20	; 0x14
     e82:	f8 01       	movw	r30, r16
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     e8c:	c6 1a       	sub	r12, r22
     e8e:	d7 0a       	sbc	r13, r23
     e90:	e8 0a       	sbc	r14, r24
     e92:	f9 0a       	sbc	r15, r25
     e94:	f8 01       	movw	r30, r16
     e96:	84 81       	ldd	r24, Z+4	; 0x04
     e98:	95 81       	ldd	r25, Z+5	; 0x05
     e9a:	a6 81       	ldd	r26, Z+6	; 0x06
     e9c:	b7 81       	ldd	r27, Z+7	; 0x07
     e9e:	c8 0e       	add	r12, r24
     ea0:	d9 1e       	adc	r13, r25
     ea2:	ea 1e       	adc	r14, r26
     ea4:	fb 1e       	adc	r15, r27
     ea6:	c4 82       	std	Z+4, r12	; 0x04
     ea8:	d5 82       	std	Z+5, r13	; 0x05
     eaa:	e6 82       	std	Z+6, r14	; 0x06
     eac:	f7 82       	std	Z+7, r15	; 0x07
    mag_vector.XYZ.Z += _mul(mag_vector.xyz.x , delta_rad[1]) - _mul(mag_vector.xyz.y , delta_rad[0]);
     eae:	b2 01       	movw	r22, r4
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     eb8:	6b 01       	movw	r12, r22
     eba:	7c 01       	movw	r14, r24
     ebc:	b4 01       	movw	r22, r8
     ebe:	f8 01       	movw	r30, r16
     ec0:	86 81       	ldd	r24, Z+6	; 0x06
     ec2:	97 81       	ldd	r25, Z+7	; 0x07
     ec4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     ec8:	c6 1a       	sub	r12, r22
     eca:	d7 0a       	sbc	r13, r23
     ecc:	e8 0a       	sbc	r14, r24
     ece:	f9 0a       	sbc	r15, r25
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 85       	ldd	r24, Z+8	; 0x08
     ed4:	91 85       	ldd	r25, Z+9	; 0x09
     ed6:	a2 85       	ldd	r26, Z+10	; 0x0a
     ed8:	b3 85       	ldd	r27, Z+11	; 0x0b
     eda:	c8 0e       	add	r12, r24
     edc:	d9 1e       	adc	r13, r25
     ede:	ea 1e       	adc	r14, r26
     ee0:	fb 1e       	adc	r15, r27
     ee2:	c0 86       	std	Z+8, r12	; 0x08
     ee4:	d1 86       	std	Z+9, r13	; 0x09
     ee6:	e2 86       	std	Z+10, r14	; 0x0a
     ee8:	f3 86       	std	Z+11, r15	; 0x0b

    // complementary filter
    int32_t acc_sq_sum = _mul(acc_lpf_xyz[0],acc_lpf_xyz[0]) + _mul(acc_lpf_xyz[1],acc_lpf_xyz[1]) + _mul(acc_lpf_xyz[2],acc_lpf_xyz[2]);
     eea:	f1 01       	movw	r30, r2
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	bc 01       	movw	r22, r24
     ef2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     ef6:	6b 01       	movw	r12, r22
     ef8:	7c 01       	movw	r14, r24
     efa:	d1 01       	movw	r26, r2
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	8d 91       	ld	r24, X+
     f00:	9c 91       	ld	r25, X
     f02:	13 97       	sbiw	r26, 0x03	; 3
     f04:	bc 01       	movw	r22, r24
     f06:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     f0a:	c6 0e       	add	r12, r22
     f0c:	d7 1e       	adc	r13, r23
     f0e:	e8 1e       	adc	r14, r24
     f10:	f9 1e       	adc	r15, r25
     f12:	f1 01       	movw	r30, r2
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	95 81       	ldd	r25, Z+5	; 0x05
     f18:	bc 01       	movw	r22, r24
     f1a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
     f1e:	6c 0d       	add	r22, r12
     f20:	7d 1d       	adc	r23, r13
     f22:	8e 1d       	adc	r24, r14
     f24:	9f 1d       	adc	r25, r15
    if((int32_t)(0.85*ACC_1G*ACC_1G) < acc_sq_sum && acc_sq_sum < (int32_t)(1.15*ACC_1G*ACC_1G))
     f26:	8b 01       	movw	r16, r22
     f28:	9c 01       	movw	r18, r24
     f2a:	0a 59       	subi	r16, 0x9A	; 154
     f2c:	19 4d       	sbci	r17, 0xD9	; 217
     f2e:	21 09       	sbc	r18, r1
     f30:	31 09       	sbc	r19, r1
     f32:	0c 3c       	cpi	r16, 0xCC	; 204
     f34:	1c 44       	sbci	r17, 0x4C	; 76
     f36:	21 05       	cpc	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <rpy_get_rpy+0x436>
     f3c:	f3 c0       	rjmp	.+486    	; 0x1124 <rpy_get_rpy+0x61c>
    {
        float scale = 256 * InvSqrt(acc_sq_sum);
     f3e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     f42:	0e 94 81 04 	call	0x902	; 0x902 <InvSqrt>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     f52:	4b 01       	movw	r8, r22
     f54:	5c 01       	movw	r10, r24
        acc_vector.XYZ.X += (int32_t)((scale * acc_lpf_xyz[0]) - acc_vector.xyz.x) << (16-ACCV_COMPLE_FACTOR);
     f56:	0d eb       	ldi	r16, 0xBD	; 189
     f58:	11 e0       	ldi	r17, 0x01	; 1
     f5a:	d1 01       	movw	r26, r2
     f5c:	6d 91       	ld	r22, X+
     f5e:	7c 91       	ld	r23, X
     f60:	07 2e       	mov	r0, r23
     f62:	00 0c       	add	r0, r0
     f64:	88 0b       	sbc	r24, r24
     f66:	99 0b       	sbc	r25, r25
     f68:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     f6c:	a5 01       	movw	r20, r10
     f6e:	94 01       	movw	r18, r8
     f70:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
     f74:	2b 01       	movw	r4, r22
     f76:	3c 01       	movw	r6, r24
     f78:	f8 01       	movw	r30, r16
     f7a:	62 81       	ldd	r22, Z+2	; 0x02
     f7c:	73 81       	ldd	r23, Z+3	; 0x03
     f7e:	07 2e       	mov	r0, r23
     f80:	00 0c       	add	r0, r0
     f82:	88 0b       	sbc	r24, r24
     f84:	99 0b       	sbc	r25, r25
     f86:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
     f8a:	9b 01       	movw	r18, r22
     f8c:	ac 01       	movw	r20, r24
     f8e:	c3 01       	movw	r24, r6
     f90:	b2 01       	movw	r22, r4
     f92:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__subsf3>
     f96:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	aa 1f       	adc	r26, r26
     fa4:	bb 1f       	adc	r27, r27
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	aa 1f       	adc	r26, r26
     fac:	bb 1f       	adc	r27, r27
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	aa 1f       	adc	r26, r26
     fbc:	bb 1f       	adc	r27, r27
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	aa 1f       	adc	r26, r26
     fc4:	bb 1f       	adc	r27, r27
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	aa 1f       	adc	r26, r26
     fcc:	bb 1f       	adc	r27, r27
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	aa 1f       	adc	r26, r26
     fd4:	bb 1f       	adc	r27, r27
     fd6:	f8 01       	movw	r30, r16
     fd8:	40 81       	ld	r20, Z
     fda:	51 81       	ldd	r21, Z+1	; 0x01
     fdc:	62 81       	ldd	r22, Z+2	; 0x02
     fde:	73 81       	ldd	r23, Z+3	; 0x03
     fe0:	84 0f       	add	r24, r20
     fe2:	95 1f       	adc	r25, r21
     fe4:	a6 1f       	adc	r26, r22
     fe6:	b7 1f       	adc	r27, r23
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
        acc_vector.XYZ.Y += (int32_t)((scale * acc_lpf_xyz[1]) - acc_vector.xyz.y) << (16-ACCV_COMPLE_FACTOR);
     ff0:	d1 01       	movw	r26, r2
     ff2:	12 96       	adiw	r26, 0x02	; 2
     ff4:	6d 91       	ld	r22, X+
     ff6:	7c 91       	ld	r23, X
     ff8:	13 97       	sbiw	r26, 0x03	; 3
     ffa:	07 2e       	mov	r0, r23
     ffc:	00 0c       	add	r0, r0
     ffe:	88 0b       	sbc	r24, r24
    1000:	99 0b       	sbc	r25, r25
    1002:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    1006:	a5 01       	movw	r20, r10
    1008:	94 01       	movw	r18, r8
    100a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
    100e:	2b 01       	movw	r4, r22
    1010:	3c 01       	movw	r6, r24
    1012:	f8 01       	movw	r30, r16
    1014:	66 81       	ldd	r22, Z+6	; 0x06
    1016:	77 81       	ldd	r23, Z+7	; 0x07
    1018:	07 2e       	mov	r0, r23
    101a:	00 0c       	add	r0, r0
    101c:	88 0b       	sbc	r24, r24
    101e:	99 0b       	sbc	r25, r25
    1020:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	c3 01       	movw	r24, r6
    102a:	b2 01       	movw	r22, r4
    102c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__subsf3>
    1030:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	aa 1f       	adc	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	aa 1f       	adc	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	aa 1f       	adc	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	f8 01       	movw	r30, r16
    1072:	44 81       	ldd	r20, Z+4	; 0x04
    1074:	55 81       	ldd	r21, Z+5	; 0x05
    1076:	66 81       	ldd	r22, Z+6	; 0x06
    1078:	77 81       	ldd	r23, Z+7	; 0x07
    107a:	84 0f       	add	r24, r20
    107c:	95 1f       	adc	r25, r21
    107e:	a6 1f       	adc	r26, r22
    1080:	b7 1f       	adc	r27, r23
    1082:	84 83       	std	Z+4, r24	; 0x04
    1084:	95 83       	std	Z+5, r25	; 0x05
    1086:	a6 83       	std	Z+6, r26	; 0x06
    1088:	b7 83       	std	Z+7, r27	; 0x07
        acc_vector.XYZ.Z += (int32_t)((scale * acc_lpf_xyz[2]) - acc_vector.xyz.z) << (16-ACCV_COMPLE_FACTOR);
    108a:	d1 01       	movw	r26, r2
    108c:	14 96       	adiw	r26, 0x04	; 4
    108e:	6d 91       	ld	r22, X+
    1090:	7c 91       	ld	r23, X
    1092:	15 97       	sbiw	r26, 0x05	; 5
    1094:	07 2e       	mov	r0, r23
    1096:	00 0c       	add	r0, r0
    1098:	88 0b       	sbc	r24, r24
    109a:	99 0b       	sbc	r25, r25
    109c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    10a0:	a5 01       	movw	r20, r10
    10a2:	94 01       	movw	r18, r8
    10a4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
    10a8:	6b 01       	movw	r12, r22
    10aa:	7c 01       	movw	r14, r24
    10ac:	f8 01       	movw	r30, r16
    10ae:	62 85       	ldd	r22, Z+10	; 0x0a
    10b0:	73 85       	ldd	r23, Z+11	; 0x0b
    10b2:	07 2e       	mov	r0, r23
    10b4:	00 0c       	add	r0, r0
    10b6:	88 0b       	sbc	r24, r24
    10b8:	99 0b       	sbc	r25, r25
    10ba:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	c7 01       	movw	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__subsf3>
    10ca:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	aa 1f       	adc	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	aa 1f       	adc	r26, r26
    10e8:	bb 1f       	adc	r27, r27
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	aa 1f       	adc	r26, r26
    10f0:	bb 1f       	adc	r27, r27
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	aa 1f       	adc	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	aa 1f       	adc	r26, r26
    1108:	bb 1f       	adc	r27, r27
    110a:	f8 01       	movw	r30, r16
    110c:	40 85       	ldd	r20, Z+8	; 0x08
    110e:	51 85       	ldd	r21, Z+9	; 0x09
    1110:	62 85       	ldd	r22, Z+10	; 0x0a
    1112:	73 85       	ldd	r23, Z+11	; 0x0b
    1114:	84 0f       	add	r24, r20
    1116:	95 1f       	adc	r25, r21
    1118:	a6 1f       	adc	r26, r22
    111a:	b7 1f       	adc	r27, r23
    111c:	80 87       	std	Z+8, r24	; 0x08
    111e:	91 87       	std	Z+9, r25	; 0x09
    1120:	a2 87       	std	Z+10, r26	; 0x0a
    1122:	b3 87       	std	Z+11, r27	; 0x0b
    }
    mag_vector.XYZ.X += (int32_t)(mag[0]-mag_vector.xyz.x) << (16-MAGV_COMPLE_FACTOR);
    1124:	05 ea       	ldi	r16, 0xA5	; 165
    1126:	11 e0       	ldi	r17, 0x01	; 1
    1128:	8d 85       	ldd	r24, Y+13	; 0x0d
    112a:	9e 85       	ldd	r25, Y+14	; 0x0e
    112c:	d8 01       	movw	r26, r16
    112e:	12 96       	adiw	r26, 0x02	; 2
    1130:	2d 91       	ld	r18, X+
    1132:	3c 91       	ld	r19, X
    1134:	13 97       	sbiw	r26, 0x03	; 3
    1136:	82 1b       	sub	r24, r18
    1138:	93 0b       	sbc	r25, r19
    113a:	09 2e       	mov	r0, r25
    113c:	00 0c       	add	r0, r0
    113e:	aa 0b       	sbc	r26, r26
    1140:	bb 0b       	sbc	r27, r27
    1142:	ba 2f       	mov	r27, r26
    1144:	a9 2f       	mov	r26, r25
    1146:	98 2f       	mov	r25, r24
    1148:	88 27       	eor	r24, r24
    114a:	f8 01       	movw	r30, r16
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	62 81       	ldd	r22, Z+2	; 0x02
    1152:	73 81       	ldd	r23, Z+3	; 0x03
    1154:	84 0f       	add	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	a6 1f       	adc	r26, r22
    115a:	b7 1f       	adc	r27, r23
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
    mag_vector.XYZ.Y += (int32_t)(mag[1]-mag_vector.xyz.y) << (16-MAGV_COMPLE_FACTOR);
    1164:	8f 85       	ldd	r24, Y+15	; 0x0f
    1166:	98 89       	ldd	r25, Y+16	; 0x10
    1168:	26 81       	ldd	r18, Z+6	; 0x06
    116a:	37 81       	ldd	r19, Z+7	; 0x07
    116c:	82 1b       	sub	r24, r18
    116e:	93 0b       	sbc	r25, r19
    1170:	09 2e       	mov	r0, r25
    1172:	00 0c       	add	r0, r0
    1174:	aa 0b       	sbc	r26, r26
    1176:	bb 0b       	sbc	r27, r27
    1178:	ba 2f       	mov	r27, r26
    117a:	a9 2f       	mov	r26, r25
    117c:	98 2f       	mov	r25, r24
    117e:	88 27       	eor	r24, r24
    1180:	44 81       	ldd	r20, Z+4	; 0x04
    1182:	55 81       	ldd	r21, Z+5	; 0x05
    1184:	66 81       	ldd	r22, Z+6	; 0x06
    1186:	77 81       	ldd	r23, Z+7	; 0x07
    1188:	84 0f       	add	r24, r20
    118a:	95 1f       	adc	r25, r21
    118c:	a6 1f       	adc	r26, r22
    118e:	b7 1f       	adc	r27, r23
    1190:	84 83       	std	Z+4, r24	; 0x04
    1192:	95 83       	std	Z+5, r25	; 0x05
    1194:	a6 83       	std	Z+6, r26	; 0x06
    1196:	b7 83       	std	Z+7, r27	; 0x07
    mag_vector.XYZ.Z += (int32_t)(mag[2]-mag_vector.xyz.z) << (16-MAGV_COMPLE_FACTOR);
    1198:	89 89       	ldd	r24, Y+17	; 0x11
    119a:	9a 89       	ldd	r25, Y+18	; 0x12
    119c:	22 85       	ldd	r18, Z+10	; 0x0a
    119e:	33 85       	ldd	r19, Z+11	; 0x0b
    11a0:	82 1b       	sub	r24, r18
    11a2:	93 0b       	sbc	r25, r19
    11a4:	09 2e       	mov	r0, r25
    11a6:	00 0c       	add	r0, r0
    11a8:	aa 0b       	sbc	r26, r26
    11aa:	bb 0b       	sbc	r27, r27
    11ac:	ba 2f       	mov	r27, r26
    11ae:	a9 2f       	mov	r26, r25
    11b0:	98 2f       	mov	r25, r24
    11b2:	88 27       	eor	r24, r24
    11b4:	40 85       	ldd	r20, Z+8	; 0x08
    11b6:	51 85       	ldd	r21, Z+9	; 0x09
    11b8:	62 85       	ldd	r22, Z+10	; 0x0a
    11ba:	73 85       	ldd	r23, Z+11	; 0x0b
    11bc:	84 0f       	add	r24, r20
    11be:	95 1f       	adc	r25, r21
    11c0:	a6 1f       	adc	r26, r22
    11c2:	b7 1f       	adc	r27, r23
    11c4:	80 87       	std	Z+8, r24	; 0x08
    11c6:	91 87       	std	Z+9, r25	; 0x09
    11c8:	a2 87       	std	Z+10, r26	; 0x0a
    11ca:	b3 87       	std	Z+11, r27	; 0x0b

    // get rpy
    int32_t sqY_sum_sqZ = _mul(acc_vector.xyz.y,acc_vector.xyz.y) + _mul(acc_vector.xyz.z,acc_vector.xyz.z);
    11cc:	0f 2e       	mov	r0, r31
    11ce:	fd eb       	ldi	r31, 0xBD	; 189
    11d0:	ef 2e       	mov	r14, r31
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	ff 2e       	mov	r15, r31
    11d6:	f0 2d       	mov	r31, r0
    11d8:	d7 01       	movw	r26, r14
    11da:	16 96       	adiw	r26, 0x06	; 6
    11dc:	8d 91       	ld	r24, X+
    11de:	9c 91       	ld	r25, X
    11e0:	17 97       	sbiw	r26, 0x07	; 7
    11e2:	bc 01       	movw	r22, r24
    11e4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    11e8:	4b 01       	movw	r8, r22
    11ea:	5c 01       	movw	r10, r24
    11ec:	f7 01       	movw	r30, r14
    11ee:	82 85       	ldd	r24, Z+10	; 0x0a
    11f0:	93 85       	ldd	r25, Z+11	; 0x0b
    11f2:	bc 01       	movw	r22, r24
    11f4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    11f8:	86 0e       	add	r8, r22
    11fa:	97 1e       	adc	r9, r23
    11fc:	a8 1e       	adc	r10, r24
    11fe:	b9 1e       	adc	r11, r25
    rpy[0] = _atan2(acc_vector.xyz.y, acc_vector.xyz.z);
    1200:	d7 01       	movw	r26, r14
    1202:	1a 96       	adiw	r26, 0x0a	; 10
    1204:	2d 91       	ld	r18, X+
    1206:	3c 91       	ld	r19, X
    1208:	1b 97       	sbiw	r26, 0x0b	; 11
    120a:	03 2e       	mov	r0, r19
    120c:	00 0c       	add	r0, r0
    120e:	44 0b       	sbc	r20, r20
    1210:	55 0b       	sbc	r21, r21
    1212:	16 96       	adiw	r26, 0x06	; 6
    1214:	6d 91       	ld	r22, X+
    1216:	7c 91       	ld	r23, X
    1218:	17 97       	sbiw	r26, 0x07	; 7
    121a:	07 2e       	mov	r0, r23
    121c:	00 0c       	add	r0, r0
    121e:	88 0b       	sbc	r24, r24
    1220:	99 0b       	sbc	r25, r25
    1222:	0e 94 bc 04 	call	0x978	; 0x978 <_atan2>
    1226:	ef 89       	ldd	r30, Y+23	; 0x17
    1228:	f8 8d       	ldd	r31, Y+24	; 0x18
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    rpy[1] = _atan2(-acc_vector.xyz.x, InvSqrt(sqY_sum_sqZ)*sqY_sum_sqZ);
    122e:	c5 01       	movw	r24, r10
    1230:	b4 01       	movw	r22, r8
    1232:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    1236:	4b 01       	movw	r8, r22
    1238:	5c 01       	movw	r10, r24
    123a:	0e 94 81 04 	call	0x902	; 0x902 <InvSqrt>
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	c5 01       	movw	r24, r10
    1244:	b4 01       	movw	r22, r8
    1246:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
    124a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	d7 01       	movw	r26, r14
    1254:	12 96       	adiw	r26, 0x02	; 2
    1256:	8d 91       	ld	r24, X+
    1258:	9c 91       	ld	r25, X
    125a:	13 97       	sbiw	r26, 0x03	; 3
    125c:	91 95       	neg	r25
    125e:	81 95       	neg	r24
    1260:	91 09       	sbc	r25, r1
    1262:	bc 01       	movw	r22, r24
    1264:	99 0f       	add	r25, r25
    1266:	88 0b       	sbc	r24, r24
    1268:	99 0b       	sbc	r25, r25
    126a:	0e 94 bc 04 	call	0x978	; 0x978 <_atan2>
    126e:	ef 89       	ldd	r30, Y+23	; 0x17
    1270:	f8 8d       	ldd	r31, Y+24	; 0x18
    1272:	93 83       	std	Z+3, r25	; 0x03
    1274:	82 83       	std	Z+2, r24	; 0x02

    int16_t cross_x = (_mul(acc_vector.xyz.y , mag_vector.xyz.z) - _mul(acc_vector.xyz.z , mag_vector.xyz.y))>>7;
    1276:	d8 01       	movw	r26, r16
    1278:	1a 96       	adiw	r26, 0x0a	; 10
    127a:	6d 91       	ld	r22, X+
    127c:	7c 91       	ld	r23, X
    127e:	1b 97       	sbiw	r26, 0x0b	; 11
    1280:	f7 01       	movw	r30, r14
    1282:	86 81       	ldd	r24, Z+6	; 0x06
    1284:	97 81       	ldd	r25, Z+7	; 0x07
    1286:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    128a:	4b 01       	movw	r8, r22
    128c:	5c 01       	movw	r10, r24
    128e:	d8 01       	movw	r26, r16
    1290:	16 96       	adiw	r26, 0x06	; 6
    1292:	6d 91       	ld	r22, X+
    1294:	7c 91       	ld	r23, X
    1296:	17 97       	sbiw	r26, 0x07	; 7
    1298:	f7 01       	movw	r30, r14
    129a:	82 85       	ldd	r24, Z+10	; 0x0a
    129c:	93 85       	ldd	r25, Z+11	; 0x0b
    129e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    12a2:	86 1a       	sub	r8, r22
    12a4:	97 0a       	sbc	r9, r23
    12a6:	a8 0a       	sbc	r10, r24
    12a8:	b9 0a       	sbc	r11, r25
    12aa:	a5 01       	movw	r20, r10
    12ac:	94 01       	movw	r18, r8
    12ae:	68 94       	set
    12b0:	16 f8       	bld	r1, 6
    12b2:	55 95       	asr	r21
    12b4:	47 95       	ror	r20
    12b6:	37 95       	ror	r19
    12b8:	27 95       	ror	r18
    12ba:	16 94       	lsr	r1
    12bc:	d1 f7       	brne	.-12     	; 0x12b2 <rpy_get_rpy+0x7aa>
    12be:	2b 8b       	std	Y+19, r18	; 0x13
    12c0:	3c 8b       	std	Y+20, r19	; 0x14
    12c2:	4d 8b       	std	Y+21, r20	; 0x15
    12c4:	5e 8b       	std	Y+22, r21	; 0x16
    int16_t cross_y = (_mul(acc_vector.xyz.z , mag_vector.xyz.x) - _mul(acc_vector.xyz.x , mag_vector.xyz.z))>>7;
    12c6:	d8 01       	movw	r26, r16
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	6d 91       	ld	r22, X+
    12cc:	7c 91       	ld	r23, X
    12ce:	13 97       	sbiw	r26, 0x03	; 3
    12d0:	f7 01       	movw	r30, r14
    12d2:	82 85       	ldd	r24, Z+10	; 0x0a
    12d4:	93 85       	ldd	r25, Z+11	; 0x0b
    12d6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    12da:	4b 01       	movw	r8, r22
    12dc:	5c 01       	movw	r10, r24
    12de:	d8 01       	movw	r26, r16
    12e0:	1a 96       	adiw	r26, 0x0a	; 10
    12e2:	6d 91       	ld	r22, X+
    12e4:	7c 91       	ld	r23, X
    12e6:	1b 97       	sbiw	r26, 0x0b	; 11
    12e8:	f7 01       	movw	r30, r14
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    12f2:	86 1a       	sub	r8, r22
    12f4:	97 0a       	sbc	r9, r23
    12f6:	a8 0a       	sbc	r10, r24
    12f8:	b9 0a       	sbc	r11, r25
    12fa:	68 94       	set
    12fc:	16 f8       	bld	r1, 6
    12fe:	b5 94       	asr	r11
    1300:	a7 94       	ror	r10
    1302:	97 94       	ror	r9
    1304:	87 94       	ror	r8
    1306:	16 94       	lsr	r1
    1308:	d1 f7       	brne	.-12     	; 0x12fe <rpy_get_rpy+0x7f6>
    130a:	64 01       	movw	r12, r8
    int16_t cross_z = (_mul(acc_vector.xyz.x , mag_vector.xyz.y) - _mul(acc_vector.xyz.y , mag_vector.xyz.x))>>7;
    130c:	d8 01       	movw	r26, r16
    130e:	16 96       	adiw	r26, 0x06	; 6
    1310:	6d 91       	ld	r22, X+
    1312:	7c 91       	ld	r23, X
    1314:	17 97       	sbiw	r26, 0x07	; 7
    1316:	f7 01       	movw	r30, r14
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    1320:	2b 01       	movw	r4, r22
    1322:	3c 01       	movw	r6, r24
    1324:	d8 01       	movw	r26, r16
    1326:	12 96       	adiw	r26, 0x02	; 2
    1328:	6d 91       	ld	r22, X+
    132a:	7c 91       	ld	r23, X
    132c:	13 97       	sbiw	r26, 0x03	; 3
    132e:	f7 01       	movw	r30, r14
    1330:	86 81       	ldd	r24, Z+6	; 0x06
    1332:	97 81       	ldd	r25, Z+7	; 0x07
    1334:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    1338:	46 1a       	sub	r4, r22
    133a:	57 0a       	sbc	r5, r23
    133c:	68 0a       	sbc	r6, r24
    133e:	79 0a       	sbc	r7, r25
    1340:	68 94       	set
    1342:	16 f8       	bld	r1, 6
    1344:	75 94       	asr	r7
    1346:	67 94       	ror	r6
    1348:	57 94       	ror	r5
    134a:	47 94       	ror	r4
    134c:	16 94       	lsr	r1
    134e:	d1 f7       	brne	.-12     	; 0x1344 <rpy_get_rpy+0x83c>
    int32_t sqY_sqZ = _mul(cross_y , cross_y) + _mul(cross_z , cross_z);
    1350:	b4 01       	movw	r22, r8
    1352:	c4 01       	movw	r24, r8
    1354:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    1358:	4b 01       	movw	r8, r22
    135a:	5c 01       	movw	r10, r24
    135c:	b2 01       	movw	r22, r4
    135e:	c2 01       	movw	r24, r4
    1360:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_mul>
    1364:	86 0e       	add	r8, r22
    1366:	97 1e       	adc	r9, r23
    1368:	a8 1e       	adc	r10, r24
    136a:	b9 1e       	adc	r11, r25
    if(cross_y>0){
    136c:	1c 14       	cp	r1, r12
    136e:	1d 04       	cpc	r1, r13
    1370:	fc f4       	brge	.+62     	; 0x13b0 <rpy_get_rpy+0x8a8>
        rpy[2] = _atan2(cross_x , sqY_sqZ*InvSqrt(sqY_sqZ));
    1372:	c5 01       	movw	r24, r10
    1374:	b4 01       	movw	r22, r8
    1376:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    137a:	6b 01       	movw	r12, r22
    137c:	7c 01       	movw	r14, r24
    137e:	0e 94 81 04 	call	0x902	; 0x902 <InvSqrt>
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	c7 01       	movw	r24, r14
    1388:	b6 01       	movw	r22, r12
    138a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
    138e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
    1396:	ab 89       	ldd	r26, Y+19	; 0x13
    1398:	bc 89       	ldd	r27, Y+20	; 0x14
    139a:	bd 01       	movw	r22, r26
    139c:	bb 0f       	add	r27, r27
    139e:	88 0b       	sbc	r24, r24
    13a0:	99 0b       	sbc	r25, r25
    13a2:	0e 94 bc 04 	call	0x978	; 0x978 <_atan2>
    13a6:	ef 89       	ldd	r30, Y+23	; 0x17
    13a8:	f8 8d       	ldd	r31, Y+24	; 0x18
    13aa:	95 83       	std	Z+5, r25	; 0x05
    13ac:	84 83       	std	Z+4, r24	; 0x04
    13ae:	25 c0       	rjmp	.+74     	; 0x13fa <rpy_get_rpy+0x8f2>
        }else{
        rpy[2] = _atan2(cross_x , -sqY_sqZ*InvSqrt(sqY_sqZ));
    13b0:	c5 01       	movw	r24, r10
    13b2:	b4 01       	movw	r22, r8
    13b4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    13b8:	0e 94 81 04 	call	0x902	; 0x902 <InvSqrt>
    13bc:	6b 01       	movw	r12, r22
    13be:	7c 01       	movw	r14, r24
    13c0:	66 27       	eor	r22, r22
    13c2:	77 27       	eor	r23, r23
    13c4:	cb 01       	movw	r24, r22
    13c6:	68 19       	sub	r22, r8
    13c8:	79 09       	sbc	r23, r9
    13ca:	8a 09       	sbc	r24, r10
    13cc:	9b 09       	sbc	r25, r11
    13ce:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    13d2:	a7 01       	movw	r20, r14
    13d4:	96 01       	movw	r18, r12
    13d6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__mulsf3>
    13da:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fixsfsi>
    13de:	9b 01       	movw	r18, r22
    13e0:	ac 01       	movw	r20, r24
    13e2:	ab 89       	ldd	r26, Y+19	; 0x13
    13e4:	bc 89       	ldd	r27, Y+20	; 0x14
    13e6:	bd 01       	movw	r22, r26
    13e8:	bb 0f       	add	r27, r27
    13ea:	88 0b       	sbc	r24, r24
    13ec:	99 0b       	sbc	r25, r25
    13ee:	0e 94 bc 04 	call	0x978	; 0x978 <_atan2>
    13f2:	ef 89       	ldd	r30, Y+23	; 0x17
    13f4:	f8 8d       	ldd	r31, Y+24	; 0x18
    13f6:	95 83       	std	Z+5, r25	; 0x05
    13f8:	84 83       	std	Z+4, r24	; 0x04
    }

    mpu9150_get_gyro(old_gyro);
    13fa:	87 ed       	ldi	r24, 0xD7	; 215
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 34 03 	call	0x668	; 0x668 <mpu9150_get_gyro>
    1402:	68 96       	adiw	r28, 0x18	; 24
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	df 90       	pop	r13
    141c:	cf 90       	pop	r12
    141e:	bf 90       	pop	r11
    1420:	af 90       	pop	r10
    1422:	9f 90       	pop	r9
    1424:	8f 90       	pop	r8
    1426:	7f 90       	pop	r7
    1428:	6f 90       	pop	r6
    142a:	5f 90       	pop	r5
    142c:	4f 90       	pop	r4
    142e:	3f 90       	pop	r3
    1430:	2f 90       	pop	r2
    1432:	08 95       	ret

00001434 <__vector_10>:
#endif

static volatile uint32_t isr_millis_;

ISR(TIMER1_CAPT_vect)
{
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	8f 93       	push	r24
    1440:	9f 93       	push	r25
    1442:	af 93       	push	r26
    1444:	bf 93       	push	r27
    isr_millis_++;
    1446:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isr_millis_>
    144a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <isr_millis_+0x1>
    144e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <isr_millis_+0x2>
    1452:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <isr_millis_+0x3>
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	a1 1d       	adc	r26, r1
    145a:	b1 1d       	adc	r27, r1
    145c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isr_millis_>
    1460:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <isr_millis_+0x1>
    1464:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <isr_millis_+0x2>
    1468:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <isr_millis_+0x3>
}
    146c:	bf 91       	pop	r27
    146e:	af 91       	pop	r26
    1470:	9f 91       	pop	r25
    1472:	8f 91       	pop	r24
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <tc_setup>:

void tc_setup(void)
{
    // CTC top ICR1
    // prescaler 8
    TCCR1A = 0;
    147e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
    1482:	8a e1       	ldi	r24, 0x1A	; 26
    1484:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    // the high byte must be written before the low byte!!!!!!
    // 4096 - 1 == 0x0FFF
    ICR1H = 0x0F;
    1488:	8f e0       	ldi	r24, 0x0F	; 15
    148a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    ICR1L = 0xFF;
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    // input capture interrupt enable
    TIMSK1 = (1<<ICIE1);
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    // global interrupt enable
    sei();
    149a:	78 94       	sei

    isr_millis_ = 0;
    149c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isr_millis_>
    14a0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <isr_millis_+0x1>
    14a4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <isr_millis_+0x2>
    14a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <isr_millis_+0x3>

    // OC0A(PD6), OC0B(PD5) non-inverting
    // WGM - Phase Correct PWM
    TCCR0A = (1<<COM0A1)|(1<<COM0B1)|(1<<WGM00);
    14ac:	91 ea       	ldi	r25, 0xA1	; 161
    14ae:	94 bd       	out	0x24, r25	; 36
    // prescaler clk/64 - 4us
    TCCR0B = (1<<CS01)|(1<<CS00);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	85 bd       	out	0x25, r24	; 37
    // OUTPUT OC0A, OC0B
    DDRD |= (1<<PORTD6)|(1<<PORTD5);
    14b4:	8a b1       	in	r24, 0x0a	; 10
    14b6:	80 66       	ori	r24, 0x60	; 96
    14b8:	8a b9       	out	0x0a, r24	; 10

    // OC2A(PB3), OC2B(PD3) non-inverting
    // WGM - Phase Correct PWM
    TCCR2A = (1<<COM2A1)|(1<<COM2B1)|(1<<WGM20);
    14ba:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    // prescaler clk/64 - 4us
    TCCR2B = (1<<CS22);
    14be:	84 e0       	ldi	r24, 0x04	; 4
    14c0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    // OUTPUT OC2A, OC2B
    DDRB |= (1<<PORTB3);
    14c4:	23 9a       	sbi	0x04, 3	; 4
    DDRD |= (1<<PORTD3);
    14c6:	53 9a       	sbi	0x0a, 3	; 10
    14c8:	08 95       	ret

000014ca <tc_micros>:
}

uint32_t tc_micros(void)
{
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    uint32_t _millis_;
    uint16_t _tcnt;

    cli();
    14ce:	f8 94       	cli
    _millis_ = isr_millis_;
    14d0:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <isr_millis_>
    14d4:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <isr_millis_+0x1>
    14d8:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <isr_millis_+0x2>
    14dc:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <isr_millis_+0x3>

    // the low byte must be read before the high byte!!!!!!
    _tcnt = TCNT1L;
    14e0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    _tcnt = ((uint16_t)TCNT1H<<8) | _tcnt;
    14e4:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	92 2b       	or	r25, r18

    // cli()로 인해 인터럽트가 발생할 수 없는 동안
    // TOV1 == 1 이 됐다면 시간이 흘렀다는 것이므로
    // _millis_++;
    if ((TIFR1 & (1<<ICF1)) && (_tcnt < 200)) _millis_++;
    14ec:	b5 9b       	sbis	0x16, 5	; 22
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <tc_micros+0x34>
    14f0:	88 3c       	cpi	r24, 0xC8	; 200
    14f2:	91 05       	cpc	r25, r1
    14f4:	20 f4       	brcc	.+8      	; 0x14fe <tc_micros+0x34>
    14f6:	4f 5f       	subi	r20, 0xFF	; 255
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	6f 4f       	sbci	r22, 0xFF	; 255
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255

    sei();
    14fe:	78 94       	sei

    // _tcnt의 1은 0.5us이므로 _tcnt/2 => us
    // _tcnt 가 2047us까지 측정하므로 11bit 사용
    // _millis_가 21bit => 21+11 = 32bit
    return (_millis_ << 11) + (_tcnt >> 1);
    1500:	03 2e       	mov	r0, r19
    1502:	3b e0       	ldi	r19, 0x0B	; 11
    1504:	44 0f       	add	r20, r20
    1506:	55 1f       	adc	r21, r21
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	3a 95       	dec	r19
    150e:	d1 f7       	brne	.-12     	; 0x1504 <tc_micros+0x3a>
    1510:	30 2d       	mov	r19, r0
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	8a 01       	movw	r16, r20
    1518:	9b 01       	movw	r18, r22
    151a:	08 0f       	add	r16, r24
    151c:	19 1f       	adc	r17, r25
    151e:	21 1d       	adc	r18, r1
    1520:	31 1d       	adc	r19, r1
    1522:	c9 01       	movw	r24, r18
    1524:	b8 01       	movw	r22, r16
}
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <__vector_18>:
{
    while (*str)
    {
        uart0_write(*str++);
    }
}
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <uart0_rx_buf_head>
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1548:	eb 5f       	subi	r30, 0xFB	; 251
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	80 83       	st	Z, r24
    154e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <uart0_rx_buf_head>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	8f 73       	andi	r24, 0x3F	; 63
    1558:	90 78       	andi	r25, 0x80	; 128
    155a:	99 23       	and	r25, r25
    155c:	24 f4       	brge	.+8      	; 0x1566 <__vector_18+0x3a>
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	80 6c       	ori	r24, 0xC0	; 192
    1562:	9f 6f       	ori	r25, 0xFF	; 255
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <uart0_rx_buf_head>
    156a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <uart0_rx_buf_head>
    156e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <uart0_rx_buf_tail>
    1572:	98 13       	cpse	r25, r24
    1574:	0e c0       	rjmp	.+28     	; 0x1592 <__vector_18+0x66>
    1576:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <uart0_rx_buf_tail>
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	8f 73       	andi	r24, 0x3F	; 63
    1580:	90 78       	andi	r25, 0x80	; 128
    1582:	99 23       	and	r25, r25
    1584:	24 f4       	brge	.+8      	; 0x158e <__vector_18+0x62>
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	80 6c       	ori	r24, 0xC0	; 192
    158a:	9f 6f       	ori	r25, 0xFF	; 255
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <uart0_rx_buf_tail>
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	0f 90       	pop	r0
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	0f 90       	pop	r0
    15a0:	1f 90       	pop	r1
    15a2:	18 95       	reti

000015a4 <__vector_19>:
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	ef 93       	push	r30
    15b4:	ff 93       	push	r31
    15b6:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <uart0_tx_buf_tail>
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	e9 5b       	subi	r30, 0xB9	; 185
    15be:	fe 4f       	sbci	r31, 0xFE	; 254
    15c0:	80 81       	ld	r24, Z
    15c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    15c6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <uart0_tx_buf_tail>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	8f 73       	andi	r24, 0x3F	; 63
    15d0:	90 78       	andi	r25, 0x80	; 128
    15d2:	99 23       	and	r25, r25
    15d4:	24 f4       	brge	.+8      	; 0x15de <__vector_19+0x3a>
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	80 6c       	ori	r24, 0xC0	; 192
    15da:	9f 6f       	ori	r25, 0xFF	; 255
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <uart0_tx_buf_tail>
    15e2:	e0 ec       	ldi	r30, 0xC0	; 192
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	80 64       	ori	r24, 0x40	; 64
    15ea:	80 83       	st	Z, r24
    15ec:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <uart0_tx_buf_head>
    15f0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <uart0_tx_buf_tail>
    15f4:	98 13       	cpse	r25, r24
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <__vector_19+0x5e>
    15f8:	e1 ec       	ldi	r30, 0xC1	; 193
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8f 7d       	andi	r24, 0xDF	; 223
    1600:	80 83       	st	Z, r24
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <uart0_begin>:
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    161c:	88 e9       	ldi	r24, 0x98	; 152
    161e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1622:	86 e0       	ldi	r24, 0x06	; 6
    1624:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1628:	60 e4       	ldi	r22, 0x40	; 64
    162a:	72 e4       	ldi	r23, 0x42	; 66
    162c:	8f e0       	ldi	r24, 0x0F	; 15
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__udivmodsi4>
    1634:	21 50       	subi	r18, 0x01	; 1
    1636:	31 09       	sbc	r19, r1
    1638:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    163c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1640:	78 94       	sei
    1642:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <uart0_rx_buf_head>
    1646:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <uart0_rx_buf_tail>
    164a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <uart0_tx_buf_head>
    164e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <uart0_tx_buf_tail>
    1652:	08 95       	ret

00001654 <uart0_write>:
    1654:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <uart0_tx_buf_head>
    1658:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <uart0_tx_buf_tail>
    165c:	29 13       	cpse	r18, r25
    165e:	0c c0       	rjmp	.+24     	; 0x1678 <uart0_write+0x24>
    1660:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1664:	95 ff       	sbrs	r25, 5
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <uart0_write+0x24>
    1668:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    166c:	e0 ec       	ldi	r30, 0xC0	; 192
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 64       	ori	r24, 0x40	; 64
    1674:	80 83       	st	Z, r24
    1676:	08 95       	ret
    1678:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <uart0_tx_buf_head>
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	e9 5b       	subi	r30, 0xB9	; 185
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	80 83       	st	Z, r24
    1684:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <uart0_tx_buf_head>
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	8f 73       	andi	r24, 0x3F	; 63
    168e:	90 78       	andi	r25, 0x80	; 128
    1690:	99 23       	and	r25, r25
    1692:	24 f4       	brge	.+8      	; 0x169c <uart0_write+0x48>
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	80 6c       	ori	r24, 0xC0	; 192
    1698:	9f 6f       	ori	r25, 0xFF	; 255
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <uart0_tx_buf_head>
    16a0:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <uart0_tx_buf_head>
    16a4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <uart0_tx_buf_tail>
    16a8:	98 17       	cp	r25, r24
    16aa:	d1 f3       	breq	.-12     	; 0x16a0 <uart0_write+0x4c>
    16ac:	e1 ec       	ldi	r30, 0xC1	; 193
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 62       	ori	r24, 0x20	; 32
    16b4:	80 83       	st	Z, r24
    16b6:	08 95       	ret

000016b8 <uart0_write_ui16>:

void uart0_write_ui16(uint16_t data)
{
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <uart0_write_ui16+0x8>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <uart0_write_ui16+0xa>
    16c2:	1f 92       	push	r1
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	fc 01       	movw	r30, r24
    char buf[5]; //0~65535
    uint16_t Q,R;
    UART_WRITE_INT;
    16ca:	9c 01       	movw	r18, r24
    16cc:	ad ec       	ldi	r26, 0xCD	; 205
    16ce:	bc ec       	ldi	r27, 0xCC	; 204
    16d0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__umulhisi3>
    16d4:	ac 01       	movw	r20, r24
    16d6:	56 95       	lsr	r21
    16d8:	47 95       	ror	r20
    16da:	56 95       	lsr	r21
    16dc:	47 95       	ror	r20
    16de:	56 95       	lsr	r21
    16e0:	47 95       	ror	r20
    16e2:	9a 01       	movw	r18, r20
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	ca 01       	movw	r24, r20
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	e8 1b       	sub	r30, r24
    16fc:	f9 0b       	sbc	r31, r25
    16fe:	80 e3       	ldi	r24, 0x30	; 48
    1700:	8e 0f       	add	r24, r30
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	41 15       	cp	r20, r1
    1706:	51 05       	cpc	r21, r1
    1708:	a1 f1       	breq	.+104    	; 0x1772 <uart0_write_ui16+0xba>
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	1f 5f       	subi	r17, 0xFF	; 255
    170e:	9a 01       	movw	r18, r20
    1710:	ad ec       	ldi	r26, 0xCD	; 205
    1712:	bc ec       	ldi	r27, 0xCC	; 204
    1714:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__umulhisi3>
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	e1 e0       	ldi	r30, 0x01	; 1
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	ec 0f       	add	r30, r28
    172a:	fd 1f       	adc	r31, r29
    172c:	e1 0f       	add	r30, r17
    172e:	f1 1d       	adc	r31, r1
    1730:	bc 01       	movw	r22, r24
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	9c 01       	movw	r18, r24
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	26 0f       	add	r18, r22
    1746:	37 1f       	adc	r19, r23
    1748:	42 1b       	sub	r20, r18
    174a:	53 0b       	sbc	r21, r19
    174c:	40 5d       	subi	r20, 0xD0	; 208
    174e:	40 83       	st	Z, r20
    1750:	ac 01       	movw	r20, r24
    1752:	89 2b       	or	r24, r25
    1754:	d9 f6       	brne	.-74     	; 0x170c <uart0_write_ui16+0x54>
    1756:	e1 e0       	ldi	r30, 0x01	; 1
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	ec 0f       	add	r30, r28
    175c:	fd 1f       	adc	r31, r29
    175e:	e1 0f       	add	r30, r17
    1760:	f1 1d       	adc	r31, r1
    1762:	80 81       	ld	r24, Z
    1764:	0e 94 2a 0b 	call	0x1654	; 0x1654 <uart0_write>
    1768:	81 2f       	mov	r24, r17
    176a:	11 50       	subi	r17, 0x01	; 1
    176c:	81 11       	cpse	r24, r1
    176e:	f3 cf       	rjmp	.-26     	; 0x1756 <uart0_write_ui16+0x9e>
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <uart0_write_ui16+0xbe>
    1772:	0e 94 2a 0b 	call	0x1654	; 0x1654 <uart0_write>
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	08 95       	ret

00001788 <uart0_write_i16>:

void uart0_write_i16(int16_t data)
{
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	ec 01       	movw	r28, r24
    if (data<0){
    178e:	99 23       	and	r25, r25
    1790:	34 f4       	brge	.+12     	; 0x179e <uart0_write_i16+0x16>
        uart0_write('-');
    1792:	8d e2       	ldi	r24, 0x2D	; 45
    1794:	0e 94 2a 0b 	call	0x1654	; 0x1654 <uart0_write>
        data=-data;
    1798:	d1 95       	neg	r29
    179a:	c1 95       	neg	r28
    179c:	d1 09       	sbc	r29, r1
    }
    uart0_write_ui16(data);
    179e:	ce 01       	movw	r24, r28
    17a0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <uart0_write_ui16>
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <__subsf3>:
    17aa:	50 58       	subi	r21, 0x80	; 128

000017ac <__addsf3>:
    17ac:	bb 27       	eor	r27, r27
    17ae:	aa 27       	eor	r26, r26
    17b0:	0e 94 ed 0b 	call	0x17da	; 0x17da <__addsf3x>
    17b4:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_round>
    17b8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscA>
    17bc:	38 f0       	brcs	.+14     	; 0x17cc <__addsf3+0x20>
    17be:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_pscB>
    17c2:	20 f0       	brcs	.+8      	; 0x17cc <__addsf3+0x20>
    17c4:	39 f4       	brne	.+14     	; 0x17d4 <__addsf3+0x28>
    17c6:	9f 3f       	cpi	r25, 0xFF	; 255
    17c8:	19 f4       	brne	.+6      	; 0x17d0 <__addsf3+0x24>
    17ca:	26 f4       	brtc	.+8      	; 0x17d4 <__addsf3+0x28>
    17cc:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__fp_nan>
    17d0:	0e f4       	brtc	.+2      	; 0x17d4 <__addsf3+0x28>
    17d2:	e0 95       	com	r30
    17d4:	e7 fb       	bst	r30, 7
    17d6:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>

000017da <__addsf3x>:
    17da:	e9 2f       	mov	r30, r25
    17dc:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_split3>
    17e0:	58 f3       	brcs	.-42     	; 0x17b8 <__addsf3+0xc>
    17e2:	ba 17       	cp	r27, r26
    17e4:	62 07       	cpc	r22, r18
    17e6:	73 07       	cpc	r23, r19
    17e8:	84 07       	cpc	r24, r20
    17ea:	95 07       	cpc	r25, r21
    17ec:	20 f0       	brcs	.+8      	; 0x17f6 <__addsf3x+0x1c>
    17ee:	79 f4       	brne	.+30     	; 0x180e <__addsf3x+0x34>
    17f0:	a6 f5       	brtc	.+104    	; 0x185a <__addsf3x+0x80>
    17f2:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__fp_zero>
    17f6:	0e f4       	brtc	.+2      	; 0x17fa <__addsf3x+0x20>
    17f8:	e0 95       	com	r30
    17fa:	0b 2e       	mov	r0, r27
    17fc:	ba 2f       	mov	r27, r26
    17fe:	a0 2d       	mov	r26, r0
    1800:	0b 01       	movw	r0, r22
    1802:	b9 01       	movw	r22, r18
    1804:	90 01       	movw	r18, r0
    1806:	0c 01       	movw	r0, r24
    1808:	ca 01       	movw	r24, r20
    180a:	a0 01       	movw	r20, r0
    180c:	11 24       	eor	r1, r1
    180e:	ff 27       	eor	r31, r31
    1810:	59 1b       	sub	r21, r25
    1812:	99 f0       	breq	.+38     	; 0x183a <__addsf3x+0x60>
    1814:	59 3f       	cpi	r21, 0xF9	; 249
    1816:	50 f4       	brcc	.+20     	; 0x182c <__addsf3x+0x52>
    1818:	50 3e       	cpi	r21, 0xE0	; 224
    181a:	68 f1       	brcs	.+90     	; 0x1876 <__addsf3x+0x9c>
    181c:	1a 16       	cp	r1, r26
    181e:	f0 40       	sbci	r31, 0x00	; 0
    1820:	a2 2f       	mov	r26, r18
    1822:	23 2f       	mov	r18, r19
    1824:	34 2f       	mov	r19, r20
    1826:	44 27       	eor	r20, r20
    1828:	58 5f       	subi	r21, 0xF8	; 248
    182a:	f3 cf       	rjmp	.-26     	; 0x1812 <__addsf3x+0x38>
    182c:	46 95       	lsr	r20
    182e:	37 95       	ror	r19
    1830:	27 95       	ror	r18
    1832:	a7 95       	ror	r26
    1834:	f0 40       	sbci	r31, 0x00	; 0
    1836:	53 95       	inc	r21
    1838:	c9 f7       	brne	.-14     	; 0x182c <__addsf3x+0x52>
    183a:	7e f4       	brtc	.+30     	; 0x185a <__addsf3x+0x80>
    183c:	1f 16       	cp	r1, r31
    183e:	ba 0b       	sbc	r27, r26
    1840:	62 0b       	sbc	r22, r18
    1842:	73 0b       	sbc	r23, r19
    1844:	84 0b       	sbc	r24, r20
    1846:	ba f0       	brmi	.+46     	; 0x1876 <__addsf3x+0x9c>
    1848:	91 50       	subi	r25, 0x01	; 1
    184a:	a1 f0       	breq	.+40     	; 0x1874 <__addsf3x+0x9a>
    184c:	ff 0f       	add	r31, r31
    184e:	bb 1f       	adc	r27, r27
    1850:	66 1f       	adc	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	88 1f       	adc	r24, r24
    1856:	c2 f7       	brpl	.-16     	; 0x1848 <__addsf3x+0x6e>
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <__addsf3x+0x9c>
    185a:	ba 0f       	add	r27, r26
    185c:	62 1f       	adc	r22, r18
    185e:	73 1f       	adc	r23, r19
    1860:	84 1f       	adc	r24, r20
    1862:	48 f4       	brcc	.+18     	; 0x1876 <__addsf3x+0x9c>
    1864:	87 95       	ror	r24
    1866:	77 95       	ror	r23
    1868:	67 95       	ror	r22
    186a:	b7 95       	ror	r27
    186c:	f7 95       	ror	r31
    186e:	9e 3f       	cpi	r25, 0xFE	; 254
    1870:	08 f0       	brcs	.+2      	; 0x1874 <__addsf3x+0x9a>
    1872:	b0 cf       	rjmp	.-160    	; 0x17d4 <__addsf3+0x28>
    1874:	93 95       	inc	r25
    1876:	88 0f       	add	r24, r24
    1878:	08 f0       	brcs	.+2      	; 0x187c <__addsf3x+0xa2>
    187a:	99 27       	eor	r25, r25
    187c:	ee 0f       	add	r30, r30
    187e:	97 95       	ror	r25
    1880:	87 95       	ror	r24
    1882:	08 95       	ret

00001884 <__divsf3>:
    1884:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__divsf3x>
    1888:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_round>
    188c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_pscB>
    1890:	58 f0       	brcs	.+22     	; 0x18a8 <__divsf3+0x24>
    1892:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscA>
    1896:	40 f0       	brcs	.+16     	; 0x18a8 <__divsf3+0x24>
    1898:	29 f4       	brne	.+10     	; 0x18a4 <__divsf3+0x20>
    189a:	5f 3f       	cpi	r21, 0xFF	; 255
    189c:	29 f0       	breq	.+10     	; 0x18a8 <__divsf3+0x24>
    189e:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>
    18a2:	51 11       	cpse	r21, r1
    18a4:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>
    18a8:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__fp_nan>

000018ac <__divsf3x>:
    18ac:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_split3>
    18b0:	68 f3       	brcs	.-38     	; 0x188c <__divsf3+0x8>

000018b2 <__divsf3_pse>:
    18b2:	99 23       	and	r25, r25
    18b4:	b1 f3       	breq	.-20     	; 0x18a2 <__divsf3+0x1e>
    18b6:	55 23       	and	r21, r21
    18b8:	91 f3       	breq	.-28     	; 0x189e <__divsf3+0x1a>
    18ba:	95 1b       	sub	r25, r21
    18bc:	55 0b       	sbc	r21, r21
    18be:	bb 27       	eor	r27, r27
    18c0:	aa 27       	eor	r26, r26
    18c2:	62 17       	cp	r22, r18
    18c4:	73 07       	cpc	r23, r19
    18c6:	84 07       	cpc	r24, r20
    18c8:	38 f0       	brcs	.+14     	; 0x18d8 <__divsf3_pse+0x26>
    18ca:	9f 5f       	subi	r25, 0xFF	; 255
    18cc:	5f 4f       	sbci	r21, 0xFF	; 255
    18ce:	22 0f       	add	r18, r18
    18d0:	33 1f       	adc	r19, r19
    18d2:	44 1f       	adc	r20, r20
    18d4:	aa 1f       	adc	r26, r26
    18d6:	a9 f3       	breq	.-22     	; 0x18c2 <__divsf3_pse+0x10>
    18d8:	35 d0       	rcall	.+106    	; 0x1944 <__divsf3_pse+0x92>
    18da:	0e 2e       	mov	r0, r30
    18dc:	3a f0       	brmi	.+14     	; 0x18ec <__divsf3_pse+0x3a>
    18de:	e0 e8       	ldi	r30, 0x80	; 128
    18e0:	32 d0       	rcall	.+100    	; 0x1946 <__divsf3_pse+0x94>
    18e2:	91 50       	subi	r25, 0x01	; 1
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	e6 95       	lsr	r30
    18e8:	00 1c       	adc	r0, r0
    18ea:	ca f7       	brpl	.-14     	; 0x18de <__divsf3_pse+0x2c>
    18ec:	2b d0       	rcall	.+86     	; 0x1944 <__divsf3_pse+0x92>
    18ee:	fe 2f       	mov	r31, r30
    18f0:	29 d0       	rcall	.+82     	; 0x1944 <__divsf3_pse+0x92>
    18f2:	66 0f       	add	r22, r22
    18f4:	77 1f       	adc	r23, r23
    18f6:	88 1f       	adc	r24, r24
    18f8:	bb 1f       	adc	r27, r27
    18fa:	26 17       	cp	r18, r22
    18fc:	37 07       	cpc	r19, r23
    18fe:	48 07       	cpc	r20, r24
    1900:	ab 07       	cpc	r26, r27
    1902:	b0 e8       	ldi	r27, 0x80	; 128
    1904:	09 f0       	breq	.+2      	; 0x1908 <__divsf3_pse+0x56>
    1906:	bb 0b       	sbc	r27, r27
    1908:	80 2d       	mov	r24, r0
    190a:	bf 01       	movw	r22, r30
    190c:	ff 27       	eor	r31, r31
    190e:	93 58       	subi	r25, 0x83	; 131
    1910:	5f 4f       	sbci	r21, 0xFF	; 255
    1912:	3a f0       	brmi	.+14     	; 0x1922 <__divsf3_pse+0x70>
    1914:	9e 3f       	cpi	r25, 0xFE	; 254
    1916:	51 05       	cpc	r21, r1
    1918:	78 f0       	brcs	.+30     	; 0x1938 <__divsf3_pse+0x86>
    191a:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>
    191e:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>
    1922:	5f 3f       	cpi	r21, 0xFF	; 255
    1924:	e4 f3       	brlt	.-8      	; 0x191e <__divsf3_pse+0x6c>
    1926:	98 3e       	cpi	r25, 0xE8	; 232
    1928:	d4 f3       	brlt	.-12     	; 0x191e <__divsf3_pse+0x6c>
    192a:	86 95       	lsr	r24
    192c:	77 95       	ror	r23
    192e:	67 95       	ror	r22
    1930:	b7 95       	ror	r27
    1932:	f7 95       	ror	r31
    1934:	9f 5f       	subi	r25, 0xFF	; 255
    1936:	c9 f7       	brne	.-14     	; 0x192a <__divsf3_pse+0x78>
    1938:	88 0f       	add	r24, r24
    193a:	91 1d       	adc	r25, r1
    193c:	96 95       	lsr	r25
    193e:	87 95       	ror	r24
    1940:	97 f9       	bld	r25, 7
    1942:	08 95       	ret
    1944:	e1 e0       	ldi	r30, 0x01	; 1
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	bb 1f       	adc	r27, r27
    194e:	62 17       	cp	r22, r18
    1950:	73 07       	cpc	r23, r19
    1952:	84 07       	cpc	r24, r20
    1954:	ba 07       	cpc	r27, r26
    1956:	20 f0       	brcs	.+8      	; 0x1960 <__divsf3_pse+0xae>
    1958:	62 1b       	sub	r22, r18
    195a:	73 0b       	sbc	r23, r19
    195c:	84 0b       	sbc	r24, r20
    195e:	ba 0b       	sbc	r27, r26
    1960:	ee 1f       	adc	r30, r30
    1962:	88 f7       	brcc	.-30     	; 0x1946 <__divsf3_pse+0x94>
    1964:	e0 95       	com	r30
    1966:	08 95       	ret

00001968 <__fixsfsi>:
    1968:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__fixunssfsi>
    196c:	68 94       	set
    196e:	b1 11       	cpse	r27, r1
    1970:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>
    1974:	08 95       	ret

00001976 <__fixunssfsi>:
    1976:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__fp_splitA>
    197a:	88 f0       	brcs	.+34     	; 0x199e <__fixunssfsi+0x28>
    197c:	9f 57       	subi	r25, 0x7F	; 127
    197e:	98 f0       	brcs	.+38     	; 0x19a6 <__fixunssfsi+0x30>
    1980:	b9 2f       	mov	r27, r25
    1982:	99 27       	eor	r25, r25
    1984:	b7 51       	subi	r27, 0x17	; 23
    1986:	b0 f0       	brcs	.+44     	; 0x19b4 <__fixunssfsi+0x3e>
    1988:	e1 f0       	breq	.+56     	; 0x19c2 <__fixunssfsi+0x4c>
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	1a f0       	brmi	.+6      	; 0x199a <__fixunssfsi+0x24>
    1994:	ba 95       	dec	r27
    1996:	c9 f7       	brne	.-14     	; 0x198a <__fixunssfsi+0x14>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <__fixunssfsi+0x4c>
    199a:	b1 30       	cpi	r27, 0x01	; 1
    199c:	91 f0       	breq	.+36     	; 0x19c2 <__fixunssfsi+0x4c>
    199e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__fp_zero>
    19a2:	b1 e0       	ldi	r27, 0x01	; 1
    19a4:	08 95       	ret
    19a6:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__fp_zero>
    19aa:	67 2f       	mov	r22, r23
    19ac:	78 2f       	mov	r23, r24
    19ae:	88 27       	eor	r24, r24
    19b0:	b8 5f       	subi	r27, 0xF8	; 248
    19b2:	39 f0       	breq	.+14     	; 0x19c2 <__fixunssfsi+0x4c>
    19b4:	b9 3f       	cpi	r27, 0xF9	; 249
    19b6:	cc f3       	brlt	.-14     	; 0x19aa <__fixunssfsi+0x34>
    19b8:	86 95       	lsr	r24
    19ba:	77 95       	ror	r23
    19bc:	67 95       	ror	r22
    19be:	b3 95       	inc	r27
    19c0:	d9 f7       	brne	.-10     	; 0x19b8 <__fixunssfsi+0x42>
    19c2:	3e f4       	brtc	.+14     	; 0x19d2 <__fixunssfsi+0x5c>
    19c4:	90 95       	com	r25
    19c6:	80 95       	com	r24
    19c8:	70 95       	com	r23
    19ca:	61 95       	neg	r22
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	8f 4f       	sbci	r24, 0xFF	; 255
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	08 95       	ret

000019d4 <__floatunsisf>:
    19d4:	e8 94       	clt
    19d6:	09 c0       	rjmp	.+18     	; 0x19ea <__floatsisf+0x12>

000019d8 <__floatsisf>:
    19d8:	97 fb       	bst	r25, 7
    19da:	3e f4       	brtc	.+14     	; 0x19ea <__floatsisf+0x12>
    19dc:	90 95       	com	r25
    19de:	80 95       	com	r24
    19e0:	70 95       	com	r23
    19e2:	61 95       	neg	r22
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	99 23       	and	r25, r25
    19ec:	a9 f0       	breq	.+42     	; 0x1a18 <__floatsisf+0x40>
    19ee:	f9 2f       	mov	r31, r25
    19f0:	96 e9       	ldi	r25, 0x96	; 150
    19f2:	bb 27       	eor	r27, r27
    19f4:	93 95       	inc	r25
    19f6:	f6 95       	lsr	r31
    19f8:	87 95       	ror	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	b7 95       	ror	r27
    1a00:	f1 11       	cpse	r31, r1
    1a02:	f8 cf       	rjmp	.-16     	; 0x19f4 <__floatsisf+0x1c>
    1a04:	fa f4       	brpl	.+62     	; 0x1a44 <__floatsisf+0x6c>
    1a06:	bb 0f       	add	r27, r27
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <__floatsisf+0x36>
    1a0a:	60 ff       	sbrs	r22, 0
    1a0c:	1b c0       	rjmp	.+54     	; 0x1a44 <__floatsisf+0x6c>
    1a0e:	6f 5f       	subi	r22, 0xFF	; 255
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	16 c0       	rjmp	.+44     	; 0x1a44 <__floatsisf+0x6c>
    1a18:	88 23       	and	r24, r24
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <__floatsisf+0x48>
    1a1c:	96 e9       	ldi	r25, 0x96	; 150
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <__floatsisf+0x6a>
    1a20:	77 23       	and	r23, r23
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <__floatsisf+0x54>
    1a24:	9e e8       	ldi	r25, 0x8E	; 142
    1a26:	87 2f       	mov	r24, r23
    1a28:	76 2f       	mov	r23, r22
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <__floatsisf+0x5e>
    1a2c:	66 23       	and	r22, r22
    1a2e:	71 f0       	breq	.+28     	; 0x1a4c <__floatsisf+0x74>
    1a30:	96 e8       	ldi	r25, 0x86	; 134
    1a32:	86 2f       	mov	r24, r22
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	2a f0       	brmi	.+10     	; 0x1a44 <__floatsisf+0x6c>
    1a3a:	9a 95       	dec	r25
    1a3c:	66 0f       	add	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	da f7       	brpl	.-10     	; 0x1a3a <__floatsisf+0x62>
    1a44:	88 0f       	add	r24, r24
    1a46:	96 95       	lsr	r25
    1a48:	87 95       	ror	r24
    1a4a:	97 f9       	bld	r25, 7
    1a4c:	08 95       	ret

00001a4e <__fp_inf>:
    1a4e:	97 f9       	bld	r25, 7
    1a50:	9f 67       	ori	r25, 0x7F	; 127
    1a52:	80 e8       	ldi	r24, 0x80	; 128
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	08 95       	ret

00001a5a <__fp_nan>:
    1a5a:	9f ef       	ldi	r25, 0xFF	; 255
    1a5c:	80 ec       	ldi	r24, 0xC0	; 192
    1a5e:	08 95       	ret

00001a60 <__fp_pscA>:
    1a60:	00 24       	eor	r0, r0
    1a62:	0a 94       	dec	r0
    1a64:	16 16       	cp	r1, r22
    1a66:	17 06       	cpc	r1, r23
    1a68:	18 06       	cpc	r1, r24
    1a6a:	09 06       	cpc	r0, r25
    1a6c:	08 95       	ret

00001a6e <__fp_pscB>:
    1a6e:	00 24       	eor	r0, r0
    1a70:	0a 94       	dec	r0
    1a72:	12 16       	cp	r1, r18
    1a74:	13 06       	cpc	r1, r19
    1a76:	14 06       	cpc	r1, r20
    1a78:	05 06       	cpc	r0, r21
    1a7a:	08 95       	ret

00001a7c <__fp_round>:
    1a7c:	09 2e       	mov	r0, r25
    1a7e:	03 94       	inc	r0
    1a80:	00 0c       	add	r0, r0
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <__fp_round+0xc>
    1a84:	88 23       	and	r24, r24
    1a86:	52 f0       	brmi	.+20     	; 0x1a9c <__fp_round+0x20>
    1a88:	bb 0f       	add	r27, r27
    1a8a:	40 f4       	brcc	.+16     	; 0x1a9c <__fp_round+0x20>
    1a8c:	bf 2b       	or	r27, r31
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <__fp_round+0x18>
    1a90:	60 ff       	sbrs	r22, 0
    1a92:	04 c0       	rjmp	.+8      	; 0x1a9c <__fp_round+0x20>
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	08 95       	ret

00001a9e <__fp_split3>:
    1a9e:	57 fd       	sbrc	r21, 7
    1aa0:	90 58       	subi	r25, 0x80	; 128
    1aa2:	44 0f       	add	r20, r20
    1aa4:	55 1f       	adc	r21, r21
    1aa6:	59 f0       	breq	.+22     	; 0x1abe <__fp_splitA+0x10>
    1aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aaa:	71 f0       	breq	.+28     	; 0x1ac8 <__fp_splitA+0x1a>
    1aac:	47 95       	ror	r20

00001aae <__fp_splitA>:
    1aae:	88 0f       	add	r24, r24
    1ab0:	97 fb       	bst	r25, 7
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <__fp_splitA+0x20>
    1ab6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab8:	79 f0       	breq	.+30     	; 0x1ad8 <__fp_splitA+0x2a>
    1aba:	87 95       	ror	r24
    1abc:	08 95       	ret
    1abe:	12 16       	cp	r1, r18
    1ac0:	13 06       	cpc	r1, r19
    1ac2:	14 06       	cpc	r1, r20
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	f2 cf       	rjmp	.-28     	; 0x1aac <__fp_split3+0xe>
    1ac8:	46 95       	lsr	r20
    1aca:	f1 df       	rcall	.-30     	; 0x1aae <__fp_splitA>
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <__fp_splitA+0x30>
    1ace:	16 16       	cp	r1, r22
    1ad0:	17 06       	cpc	r1, r23
    1ad2:	18 06       	cpc	r1, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	f1 cf       	rjmp	.-30     	; 0x1aba <__fp_splitA+0xc>
    1ad8:	86 95       	lsr	r24
    1ada:	71 05       	cpc	r23, r1
    1adc:	61 05       	cpc	r22, r1
    1ade:	08 94       	sec
    1ae0:	08 95       	ret

00001ae2 <__fp_zero>:
    1ae2:	e8 94       	clt

00001ae4 <__fp_szero>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	66 27       	eor	r22, r22
    1ae8:	77 27       	eor	r23, r23
    1aea:	cb 01       	movw	r24, r22
    1aec:	97 f9       	bld	r25, 7
    1aee:	08 95       	ret

00001af0 <__mulsf3>:
    1af0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__mulsf3x>
    1af4:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_round>
    1af8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscA>
    1afc:	38 f0       	brcs	.+14     	; 0x1b0c <__mulsf3+0x1c>
    1afe:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_pscB>
    1b02:	20 f0       	brcs	.+8      	; 0x1b0c <__mulsf3+0x1c>
    1b04:	95 23       	and	r25, r21
    1b06:	11 f0       	breq	.+4      	; 0x1b0c <__mulsf3+0x1c>
    1b08:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>
    1b0c:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__fp_nan>
    1b10:	11 24       	eor	r1, r1
    1b12:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>

00001b16 <__mulsf3x>:
    1b16:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_split3>
    1b1a:	70 f3       	brcs	.-36     	; 0x1af8 <__mulsf3+0x8>

00001b1c <__mulsf3_pse>:
    1b1c:	95 9f       	mul	r25, r21
    1b1e:	c1 f3       	breq	.-16     	; 0x1b10 <__mulsf3+0x20>
    1b20:	95 0f       	add	r25, r21
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	55 1f       	adc	r21, r21
    1b26:	62 9f       	mul	r22, r18
    1b28:	f0 01       	movw	r30, r0
    1b2a:	72 9f       	mul	r23, r18
    1b2c:	bb 27       	eor	r27, r27
    1b2e:	f0 0d       	add	r31, r0
    1b30:	b1 1d       	adc	r27, r1
    1b32:	63 9f       	mul	r22, r19
    1b34:	aa 27       	eor	r26, r26
    1b36:	f0 0d       	add	r31, r0
    1b38:	b1 1d       	adc	r27, r1
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	64 9f       	mul	r22, r20
    1b3e:	66 27       	eor	r22, r22
    1b40:	b0 0d       	add	r27, r0
    1b42:	a1 1d       	adc	r26, r1
    1b44:	66 1f       	adc	r22, r22
    1b46:	82 9f       	mul	r24, r18
    1b48:	22 27       	eor	r18, r18
    1b4a:	b0 0d       	add	r27, r0
    1b4c:	a1 1d       	adc	r26, r1
    1b4e:	62 1f       	adc	r22, r18
    1b50:	73 9f       	mul	r23, r19
    1b52:	b0 0d       	add	r27, r0
    1b54:	a1 1d       	adc	r26, r1
    1b56:	62 1f       	adc	r22, r18
    1b58:	83 9f       	mul	r24, r19
    1b5a:	a0 0d       	add	r26, r0
    1b5c:	61 1d       	adc	r22, r1
    1b5e:	22 1f       	adc	r18, r18
    1b60:	74 9f       	mul	r23, r20
    1b62:	33 27       	eor	r19, r19
    1b64:	a0 0d       	add	r26, r0
    1b66:	61 1d       	adc	r22, r1
    1b68:	23 1f       	adc	r18, r19
    1b6a:	84 9f       	mul	r24, r20
    1b6c:	60 0d       	add	r22, r0
    1b6e:	21 1d       	adc	r18, r1
    1b70:	82 2f       	mov	r24, r18
    1b72:	76 2f       	mov	r23, r22
    1b74:	6a 2f       	mov	r22, r26
    1b76:	11 24       	eor	r1, r1
    1b78:	9f 57       	subi	r25, 0x7F	; 127
    1b7a:	50 40       	sbci	r21, 0x00	; 0
    1b7c:	9a f0       	brmi	.+38     	; 0x1ba4 <__mulsf3_pse+0x88>
    1b7e:	f1 f0       	breq	.+60     	; 0x1bbc <__mulsf3_pse+0xa0>
    1b80:	88 23       	and	r24, r24
    1b82:	4a f0       	brmi	.+18     	; 0x1b96 <__mulsf3_pse+0x7a>
    1b84:	ee 0f       	add	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	66 1f       	adc	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	88 1f       	adc	r24, r24
    1b90:	91 50       	subi	r25, 0x01	; 1
    1b92:	50 40       	sbci	r21, 0x00	; 0
    1b94:	a9 f7       	brne	.-22     	; 0x1b80 <__mulsf3_pse+0x64>
    1b96:	9e 3f       	cpi	r25, 0xFE	; 254
    1b98:	51 05       	cpc	r21, r1
    1b9a:	80 f0       	brcs	.+32     	; 0x1bbc <__mulsf3_pse+0xa0>
    1b9c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>
    1ba0:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>
    1ba4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba6:	e4 f3       	brlt	.-8      	; 0x1ba0 <__mulsf3_pse+0x84>
    1ba8:	98 3e       	cpi	r25, 0xE8	; 232
    1baa:	d4 f3       	brlt	.-12     	; 0x1ba0 <__mulsf3_pse+0x84>
    1bac:	86 95       	lsr	r24
    1bae:	77 95       	ror	r23
    1bb0:	67 95       	ror	r22
    1bb2:	b7 95       	ror	r27
    1bb4:	f7 95       	ror	r31
    1bb6:	e7 95       	ror	r30
    1bb8:	9f 5f       	subi	r25, 0xFF	; 255
    1bba:	c1 f7       	brne	.-16     	; 0x1bac <__mulsf3_pse+0x90>
    1bbc:	fe 2b       	or	r31, r30
    1bbe:	88 0f       	add	r24, r24
    1bc0:	91 1d       	adc	r25, r1
    1bc2:	96 95       	lsr	r25
    1bc4:	87 95       	ror	r24
    1bc6:	97 f9       	bld	r25, 7
    1bc8:	08 95       	ret

00001bca <__udivmodsi4>:
    1bca:	a1 e2       	ldi	r26, 0x21	; 33
    1bcc:	1a 2e       	mov	r1, r26
    1bce:	aa 1b       	sub	r26, r26
    1bd0:	bb 1b       	sub	r27, r27
    1bd2:	fd 01       	movw	r30, r26
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <__udivmodsi4_ep>

00001bd6 <__udivmodsi4_loop>:
    1bd6:	aa 1f       	adc	r26, r26
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	ee 1f       	adc	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	a2 17       	cp	r26, r18
    1be0:	b3 07       	cpc	r27, r19
    1be2:	e4 07       	cpc	r30, r20
    1be4:	f5 07       	cpc	r31, r21
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__udivmodsi4_ep>
    1be8:	a2 1b       	sub	r26, r18
    1bea:	b3 0b       	sbc	r27, r19
    1bec:	e4 0b       	sbc	r30, r20
    1bee:	f5 0b       	sbc	r31, r21

00001bf0 <__udivmodsi4_ep>:
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	1a 94       	dec	r1
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <__udivmodsi4_loop>
    1bfc:	60 95       	com	r22
    1bfe:	70 95       	com	r23
    1c00:	80 95       	com	r24
    1c02:	90 95       	com	r25
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	bd 01       	movw	r22, r26
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	08 95       	ret

00001c0e <__umulhisi3>:
    1c0e:	a2 9f       	mul	r26, r18
    1c10:	b0 01       	movw	r22, r0
    1c12:	b3 9f       	mul	r27, r19
    1c14:	c0 01       	movw	r24, r0
    1c16:	a3 9f       	mul	r26, r19
    1c18:	70 0d       	add	r23, r0
    1c1a:	81 1d       	adc	r24, r1
    1c1c:	11 24       	eor	r1, r1
    1c1e:	91 1d       	adc	r25, r1
    1c20:	b2 9f       	mul	r27, r18
    1c22:	70 0d       	add	r23, r0
    1c24:	81 1d       	adc	r24, r1
    1c26:	11 24       	eor	r1, r1
    1c28:	91 1d       	adc	r25, r1
    1c2a:	08 95       	ret

00001c2c <_exit>:
    1c2c:	f8 94       	cli

00001c2e <__stop_program>:
    1c2e:	ff cf       	rjmp	.-2      	; 0x1c2e <__stop_program>
